[{
    "title": "Gitを使い倒したい",
    "date": "",
    "description": "",
    "body": "経緯 今まではサーバーの勉強なり色々兼ねてサイトを運営していたのですが，楽にサイトの管理ができないかと考え，HugoとGitで行うに至りました．そこでGitについての勉強メモとして掲載します．\n自分のサイトではMDファイルをHugoでHTML変換してGithub Pageのリポジトリに上げているので，そのpublicディレクトリをGit管理しようと思います．\nここでのpublicディレクトリとはHTML変換後のファイルら保管されているフォルダーだと認識してください．\nGit repositoryをインストールする まず，Gitに上げたいディレクトリに移動します．今回は既にGitに上げたいフォルダ public があるので，publicディレクトリに移動します．\n$ cd public 新しくディレクトリを作成する場合は\n$ mkdir test などでディレクトリを作成してください．\nそのあとでGit repositoryをインストールします\n$ git init Initialized empty Git repository in /Users/yuki/workspace/git_test/.git/ ここでエラーが出る場合は，Gitがインストールされない場合があります．\n$ git --version でご確認を．\nファイルをステージングする 各ファイルごとにステージさせる場合は\n$ git add test.html と１個１個実行します．-Aオプション（または-all）でディレクトリ内の変更があったファイルを一括でステージングさせることもできます．つまり\n$ git add -A もし，変更の有無関係なくすべてのファイルをステージングさせる場合は\n$ git add . を実行します．（とはいってもgitの性質上，-Aと.は同じと考えるのが普通ですが\u0026hellip;）\nコミットする コミットします。-mオプションでコミットメッセージを添えられます．\n$ git commit -m \u0026#34;first commit\u0026#34; -mオプションを使用しない場合，vimのような画面になるので変更内容等を確認してください．\nリモートリポジトリに反映 指定した名前にリモートリポジトリのアドレスを関連付けます．\nリモートリポジトリはネット上に存在するため，ローカルリポジトリとのやり取りを行う時は，アドレス（パス）を指定する必要があります．\n作業の都度アドレスを指定するのも大変なので，ここでoriginという名前と関連付け，以後originとして扱えるようにします．\n$ git remote add origin git@github.com:ユーザー名/リポジトリ名.git Githubにssh接続する ここかどこかでアクセス権のエラーが出ると思います．この場合の手順を載せておく．\n公開鍵・秘密鍵を作成する 公開鍵暗号での認証には公開鍵と秘密鍵が必要になります．秘密鍵は自分で保持し，公開鍵は相手（ここではGitHub)に送ります．まずは公開鍵と秘密鍵のペアを生成します．\n$ cd ~/.ssh $ ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/Users/(username)/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: 何か聞かれたら3回エンターを押せば，id_rsaとid_rsa.pubの2つの鍵が生成されます．なお，2回目，3回目はパラフレーズの設定（パスワード設定のようなもの）ですが，ここはなくてオーケーです．（慣れてきたらパラフレーズの設定もありですが，なくていいでしょう．）\n私は既にid_rsaを作っていたので別名で作成しました．この場合は\n$ ssh-keygen -t rsa -f ファイル名 で作成できます．\n公開鍵をGitHubにアップする https://github.com/settings/ssh で公開鍵の設定が出来ます．（GitHubに登録していることが前提条件です）\n画面右上の「Add SSH key」のボタンを押します。\n「title」に公開鍵名（好きにどうぞ），「key」に公開鍵の中身を入れます。\nなお、鍵の中身のクリップボードへのコピーは\nMacの場合は\n$ pbcopy \u0026lt; ~/.ssh/id_rsa.pub Windowsの場合は\n$ clip \u0026lt; ~/.ssh/id_rsa.pub です．\n接続の確認 $ ssh -T git@github.com Hi ddd3h! You\u0026#39;ve successfully authenticated, but GitHub does not provide shell access で成功です．\nコミットをプッシュする $ git push origin main Counting objects: 3, done. Delta compression using up to 4 threads. Compressing objects: 100% (2/2), done. Writing objects: 100% (3/3), 308 bytes | 308.00 KiB/s, done. Total 3 (delta 0), reused 0 (delta 0) To github.com:ユーザー名/リポジトリ名.git * [new branch] main -\u0026gt; main ",
    "ref": "/blog/2021-01-03-git/"
  },{
    "title": "遺伝的アルゴリズム最終章",
    "date": "",
    "description": "",
    "body": "遺伝的アルゴリズムの最終章 遺伝的アルゴリズムのゼミでは，アルゴリズムの概要から基礎的な内容まで遠回りをしながら一旦プログラムを書いてみて，修正するという形をとってきた。最終章では，今までしてきたことを総まとめる形で終えたい\nモジュールをインポートしよう！ 今回の「遺伝的アルゴリズム」では  Numpy  行列（多次元配列）などの数値計算に便利なツール   Pandas  表などを扱うのに便利なツール  の２つを使用した。モジュールの入れ方は    import numpy as np import pandas as pd とすればいい。ただし，https://blueqat.com/blueqatcloud を使う者や，Pandasでエラーが出る者は !pip install openpyxlを最後の行に入れるといい！\n今までのプログラムを段階ごとに関数にしよう！ エクセルデータを読み取り，データを返す関数 def read_excel(): #Excelデータの整形 df = pd.read_excel(\u0026#34;iden.xlsx\u0026#34;, sheet_name=\u0026#34;Sheet1\u0026#34;) df = df.iloc[4:14,1:33] df = df.fillna(0) df = df.replace(\u0026#34;◎\u0026#34;,2) #休日数のテーブルを作成 holiday = df.iloc[:,31:32].reset_index(drop=True) holiday.columns = [\u0026#34;休日数\u0026#34;] #基礎テーブルの作成 kiso = df.iloc[:,0:31].reset_index(drop=True) kiso.columns = [i+1 for i in range(len(kiso.columns))] return kiso, holiday 引数はなしの関数であることに注意！！\nこの関数はタプル型で２つのデータを返す！出会い系アプリタップルではないよ！\nなので，1つの変数で受け取ると\u0026hellip;.\ntest = read_excel() test ( 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 0 0 0 0 ... 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 ... 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 ... 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 ... 0 0 0 0 2 0 0 4 0 0 0 0 0 0 0 0 2 0 ... 0 0 0 0 0 0 0 5 0 0 0 0 0 0 0 0 0 0 ... 0 0 0 0 0 0 0 6 0 0 0 0 0 2 0 0 0 0 ... 0 0 0 0 0 0 0 7 0 0 0 0 0 0 0 0 0 0 ... 0 0 0 0 0 0 0 8 0 0 0 0 0 0 0 0 0 0 ... 2 0 0 0 0 0 0 9 0 0 0 0 0 0 0 0 0 0 ... 0 0 0 0 2 2 0 29 30 31 0 0 0 0 1 0 0 0 2 0 0 0 3 0 0 0 4 0 0 0 5 0 0 0 6 0 0 0 7 0 0 0 8 0 0 0 9 0 0 0 [10 rows x 31 columns], 休日数 0 9 1 8 2 9 3 8 4 9 5 9 6 10 7 8 8 9 9 9)  １つの変数に２つのデータが入ることになります（汗）\nそういうのを意図的に使うのもいいけど，普通は２つの変数で受け取ろう！\nkiso, holiday = read_excel() kiso  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 29 30 31     0 2 0 0 2 0 0 0 0 0 0 ... 0 0 0 0 0 0 0 0 0 0   1 0 0 0 0 0 0 0 0 0 0 ... 0 0 0 0 0 0 0 0 0 0   2 0 0 0 0 0 0 0 0 0 0 ... 0 0 0 0 0 0 0 0 0 0   3 0 0 0 0 0 0 0 0 0 0 ... 0 0 0 0 2 0 0 0 0 0   4 0 0 0 0 0 0 0 0 2 0 ... 0 0 0 0 0 0 0 0 0 0   5 0 0 0 0 0 0 0 0 0 0 ... 0 0 0 0 0 0 0 0 0 0   6 0 0 0 0 0 2 0 0 0 0 ... 0 0 0 0 0 0 0 0 0 0   7 0 0 0 0 0 0 0 0 0 0 ... 0 0 0 0 0 0 0 0 0 0   8 0 0 0 0 0 0 0 0 0 0 ... 2 0 0 0 0 0 0 0 0 0   9 0 0 0 0 0 0 0 0 0 0 ... 0 0 0 0 2 2 0 0 0 0    10 rows × 31 columns\n holiday  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  休日数     0 9   1 8   2 9   3 8   4 9   5 9   6 10   7 8   8 9   9 9     「親」の個体を作る関数を作ろう def FirstCreateGenes(kiso, holiday): days = len(kiso.columns) kiso_copy = kiso.copy() for k in range(len(kiso_copy)): h = [] while len(h) \u0026lt; holiday.iloc[k][0]: n = np.random.randint(1, days+1) if not n in h: h.append(n) for i in h: if kiso_copy.loc[k,i] == 0: kiso_copy.loc[k,i] = 1 return kiso_copy kiso.columns，kiso.indexって何？ kiso.columns Int64Index([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], dtype='int64')  kiso.index RangeIndex(start=0, stop=10, step=1)  よく分からない文字列が羅列しているけど，表（kisoデータ）の縦列を「kiso.columns」，横列を「kiso.index」で指定しています\nさらに，len関数でその列の長さを返しています！\nでは，ここ↓で何をしているか分かりますか？？\nh = [] while len(h) \u0026lt; holiday.iloc[k][0]: n = np.random.randint(1, days+1) if not n in h: h.append(n) 重複なしの乱数を生成しているんですよ！覚えてますか？\nでは，この関数使って実際にkiso_copyという変数に親の個体を格納しましょう！\nkiso_copy = FirstCreateGenes(kiso, holiday) kiso_copy  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 29 30 31     0 2 1 0 2 0 0 0 0 0 1 ... 0 0 0 1 0 0 1 1 0 0   1 0 0 0 0 0 0 1 0 0 0 ... 0 0 1 0 0 0 1 1 1 0   2 0 0 1 0 0 1 1 0 1 1 ... 0 1 0 1 0 0 1 0 0 0   3 0 0 0 1 0 1 0 0 1 0 ... 0 1 0 0 2 0 1 0 0 0   4 0 1 1 0 0 1 1 1 2 0 ... 0 0 1 0 0 0 0 0 0 1   5 1 0 0 0 0 1 0 1 0 0 ... 0 0 1 0 1 0 0 0 1 0   6 1 1 0 0 1 2 1 0 0 0 ... 0 0 0 0 0 0 0 1 1 1   7 1 0 0 1 0 0 0 0 0 1 ... 0 0 0 0 0 0 0 1 0 1   8 0 0 1 0 0 0 0 0 0 0 ... 2 0 0 1 0 1 0 0 1 0   9 0 0 0 1 0 0 1 0 1 0 ... 0 0 0 0 2 2 0 0 1 0    10 rows × 31 columns\n ただ，休日数にずれがありますね（汗）\nprint(np.count_nonzero(kiso_copy.iloc[0:1])) #親個体に含まれる休日数 print(holiday.loc[0][0]) #必要休日数 11 9  なので，修正しましょう！\n修正関数 def HolidayFix(kiso_copy, holiday): days = len(kiso.columns) for k in range(len(kiso_copy)): if np.count_nonzero(kiso_copy.iloc[k:k+1]) != holiday.loc[k][0]: s = np.count_nonzero(kiso_copy.iloc[k:k+1]) - holiday.loc[k][0] buf = 0 if s \u0026gt; 0: while buf \u0026lt; s: n = np.random.randint(1,days+1) if kiso_copy.loc[k,n] == 1: buf += 1 kiso_copy.loc[k,n] = 0 #休日数が少ないとき else: while buf \u0026lt; abs(s): n = np.random.randint(1,days+1) if kiso_copy.loc[k,n] == 0: buf += 1 kiso_copy.loc[k,n] = 1 return kiso_copy kiso_copyをこのholidayFix関数に入れて，この関数を通したものをkiso_copyの変数にまた格納しましょう！\nkiso_copy = HolidayFix(kiso_copy,holiday) kiso_copy  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 29 30 31     0 2 1 0 2 0 0 0 0 0 1 ... 0 0 0 1 0 0 1 1 0 0   1 0 0 0 0 0 0 1 0 0 0 ... 0 0 0 0 0 0 1 1 0 0   2 0 0 1 0 0 1 1 0 1 1 ... 0 1 0 1 0 0 1 0 0 0   3 0 0 0 0 0 1 0 0 1 0 ... 0 1 0 0 2 0 1 0 0 0   4 0 1 0 0 0 1 1 1 2 0 ... 0 0 1 0 0 0 0 0 0 1   5 1 0 0 0 0 1 0 1 0 0 ... 0 0 1 0 1 0 0 0 1 0   6 1 1 0 0 1 2 1 0 0 0 ... 0 0 0 0 0 0 0 1 1 1   7 1 0 0 1 0 0 0 0 0 1 ... 0 0 0 0 0 0 0 1 0 1   8 0 0 1 0 0 0 0 0 0 0 ... 2 0 0 1 0 1 0 0 1 0   9 0 0 0 1 0 0 1 0 1 0 ... 0 0 0 0 2 2 0 0 1 0    10 rows × 31 columns\n print(np.count_nonzero(kiso_copy.iloc[0:1])) #親個体に含まれる休日数 print(holiday.loc[0][0]) #必要休日数 9 9  休日数が同じになりました！Yeah！\n次は個体を評価する「評価関数」を作ります\ndef EvaluationFunc(kiso_copy): eva = kiso_copy.replace(2,1) # 2を1に置換 score = 0 for k in range(len(eva)): x = \u0026#39;\u0026#39;.join([str(i) for i in np.array(eva.iloc[k:k+1]).flatten()]) #5連休以上の評価 score += sum([((2 - len(i))**2)*-1 for i in x.split(\u0026#39;1\u0026#39;) if len(i) \u0026gt;= 5 ]) #3連休以上の評価 score += sum([((1 - len(i))**2)*-1 for i in x.split(\u0026#39;0\u0026#39;) if len(i) \u0026gt;= 3]) #飛び石連休の評価 score += -10 * (len(x.split(\u0026#39;101\u0026#39;))-1) #出勤数の評価 score += sum([abs(len(eva) * 0.7 - (len(eva) - np.sum(eva[k]))) * -4 for k in eva]) return score ここ↓は何をしているか覚えてますか？？\nx = \u0026#39;\u0026#39;.join([str(i) for i in np.array(eva.iloc[0:1]).flatten()]) 思い出してもらいたいのですが，一応。。。\nとりあえず，評価にあたって「休日」か「勤務日」かの２択で十分なので，2を1に置換したデータをeva変数に格納します\neva = kiso_copy.replace(2,1) eva  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 29 30 31     0 1 1 0 1 0 0 0 0 0 1 ... 0 0 0 1 0 0 1 1 0 0   1 0 0 0 0 0 0 1 0 0 0 ... 0 0 0 0 0 0 1 1 0 0   2 0 0 1 0 0 1 1 0 1 1 ... 0 1 0 1 0 0 1 0 0 0   3 0 0 0 0 0 1 0 0 1 0 ... 0 1 0 0 1 0 1 0 0 0   4 0 1 0 0 0 1 1 1 1 0 ... 0 0 1 0 0 0 0 0 0 1   5 1 0 0 0 0 1 0 1 0 0 ... 0 0 1 0 1 0 0 0 1 0   6 1 1 0 0 1 1 1 0 0 0 ... 0 0 0 0 0 0 0 1 1 1   7 1 0 0 1 0 0 0 0 0 1 ... 0 0 0 0 0 0 0 1 0 1   8 0 0 1 0 0 0 0 0 0 0 ... 1 0 0 1 0 1 0 0 1 0   9 0 0 0 1 0 0 1 0 1 0 ... 0 0 0 0 1 1 0 0 1 0    10 rows × 31 columns\n 今回は１行だけ実験します！（こういうのは自分でやろうね）\neva.iloc[0:1]  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 29 30 31     0 1 1 0 1 0 0 0 0 0 1 ... 0 0 0 1 0 0 1 1 0 0    1 rows × 31 columns\n これは縦と横がある２次元データです。\nなので，１次元にしたいです。１次元のほうが扱いやすいので。。。。\nそこで，Numpyにあるflatten関数で１次元にしたいので，Numpyのリストに変換します\nnp.array(eva.iloc[0:1]) array([[1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0]])  はい，Numpyのリストになりました！\nまだ，**[[**となってるので２次元であるのが分かります\nnp.array(eva.iloc[0:1]).flatten() array([1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0])  はい，１次元にしました\nこれをfor文にぶっこみます\nfor i in np.array(eva.iloc[0:1]).flatten(): print(i,type(i)) 1 \u0026lt;class 'numpy.int64'\u0026gt; 1 \u0026lt;class 'numpy.int64'\u0026gt; 0 \u0026lt;class 'numpy.int64'\u0026gt; 1 \u0026lt;class 'numpy.int64'\u0026gt; 0 \u0026lt;class 'numpy.int64'\u0026gt; 0 \u0026lt;class 'numpy.int64'\u0026gt; 0 \u0026lt;class 'numpy.int64'\u0026gt; 0 \u0026lt;class 'numpy.int64'\u0026gt; 0 \u0026lt;class 'numpy.int64'\u0026gt; 1 \u0026lt;class 'numpy.int64'\u0026gt; 0 \u0026lt;class 'numpy.int64'\u0026gt; 0 \u0026lt;class 'numpy.int64'\u0026gt; 0 \u0026lt;class 'numpy.int64'\u0026gt; 0 \u0026lt;class 'numpy.int64'\u0026gt; 1 \u0026lt;class 'numpy.int64'\u0026gt; 0 \u0026lt;class 'numpy.int64'\u0026gt; 1 \u0026lt;class 'numpy.int64'\u0026gt; 0 \u0026lt;class 'numpy.int64'\u0026gt; 0 \u0026lt;class 'numpy.int64'\u0026gt; 0 \u0026lt;class 'numpy.int64'\u0026gt; 0 \u0026lt;class 'numpy.int64'\u0026gt; 0 \u0026lt;class 'numpy.int64'\u0026gt; 0 \u0026lt;class 'numpy.int64'\u0026gt; 0 \u0026lt;class 'numpy.int64'\u0026gt; 1 \u0026lt;class 'numpy.int64'\u0026gt; 0 \u0026lt;class 'numpy.int64'\u0026gt; 0 \u0026lt;class 'numpy.int64'\u0026gt; 1 \u0026lt;class 'numpy.int64'\u0026gt; 1 \u0026lt;class 'numpy.int64'\u0026gt; 0 \u0026lt;class 'numpy.int64'\u0026gt; 0 \u0026lt;class 'numpy.int64'\u0026gt;  type関数でデータの型も出力したのでリストの一個一個の数字は「整数」を意味するint型であることが分かりました！\nこれらを１つに結合させたいので，str関数で数字を「文字」に変換します！\nfor i in np.array(eva.iloc[0:1]).flatten(): print(str(i),type(str(i))) 1 \u0026lt;class 'str'\u0026gt; 1 \u0026lt;class 'str'\u0026gt; 0 \u0026lt;class 'str'\u0026gt; 1 \u0026lt;class 'str'\u0026gt; 0 \u0026lt;class 'str'\u0026gt; 0 \u0026lt;class 'str'\u0026gt; 0 \u0026lt;class 'str'\u0026gt; 0 \u0026lt;class 'str'\u0026gt; 0 \u0026lt;class 'str'\u0026gt; 1 \u0026lt;class 'str'\u0026gt; 0 \u0026lt;class 'str'\u0026gt; 0 \u0026lt;class 'str'\u0026gt; 0 \u0026lt;class 'str'\u0026gt; 0 \u0026lt;class 'str'\u0026gt; 1 \u0026lt;class 'str'\u0026gt; 0 \u0026lt;class 'str'\u0026gt; 1 \u0026lt;class 'str'\u0026gt; 0 \u0026lt;class 'str'\u0026gt; 0 \u0026lt;class 'str'\u0026gt; 0 \u0026lt;class 'str'\u0026gt; 0 \u0026lt;class 'str'\u0026gt; 0 \u0026lt;class 'str'\u0026gt; 0 \u0026lt;class 'str'\u0026gt; 0 \u0026lt;class 'str'\u0026gt; 1 \u0026lt;class 'str'\u0026gt; 0 \u0026lt;class 'str'\u0026gt; 0 \u0026lt;class 'str'\u0026gt; 1 \u0026lt;class 'str'\u0026gt; 1 \u0026lt;class 'str'\u0026gt; 0 \u0026lt;class 'str'\u0026gt; 0 \u0026lt;class 'str'\u0026gt;  はい，文字列に成りました！これをリストにするときは。。。\nh = [] for i in np.array(eva.iloc[0:1]).flatten(): h.append(str(i)) h ['1', '1', '0', '1', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '1', '0', '1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0']  こんな感じでできます。ただ，なんとこれを一行で書けます！\n[str(i) for i in np.array(eva.iloc[0:1]).flatten()] ['1', '1', '0', '1', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '1', '0', '1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '1', '1', '0', '0']  わーお！\nここで，join関数を使うと，リストの文字列を一つの文字列に結合できます！！\n\u0026#39;＠\u0026#39;.join([str(i) for i in np.array(eva.iloc[0:1]).flatten()]) '1＠1＠0＠1＠0＠0＠0＠0＠0＠1＠0＠0＠0＠0＠1＠0＠1＠0＠0＠0＠0＠0＠0＠0＠1＠0＠0＠1＠1＠0＠0'  で，クォーテーションの間に入れた文字で結合できます。今回は単に結合したいだけなので何も入れなくていいです\n\u0026#39;\u0026#39;.join([str(i) for i in np.array(eva.iloc[0:1]).flatten()]) '1101000001000010100000001001100'  で，これをxという変数に格納したわけです！\nx = \u0026#39;\u0026#39;.join([str(i) for i in np.array(eva.iloc[0:1]).flatten()]) ここでxを今度は1で分割してみましょう！\nx.split(\u0026#39;1\u0026#39;) ['', '', '0', '00000', '0000', '0', '0000000', '00', '', '00']  今回では１が休日なので，0の個数が連勤になるわけですね！len関数で連勤を調べられるわけです！\nそれを評価関数内でやってるのです！\nでは，kiso_copyのデータを評価してみましょう！\nscore = EvaluationFunc(kiso_copy) score -769.0  わ。。。。ひくいですねww\nここからは遺伝操作！！ 醍醐味の遺伝操作を行います！\n遺伝操作をするにあたり親は２体必要です！（当然ですが。。。）１人では遺伝交配はできません！！！！\nなので，先程，作った関数を使ってparentという変数（リスト）に２体入れましょう！\nkiso, holiday = read_excel() parent = [] for i in range(2): kiso_copy = FirstCreateGenes(kiso, holiday) kiso_copy = HolidayFix(kiso_copy,holiday) parent.append(kiso_copy) parent[0]  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 29 30 31     0 2 0 1 2 1 0 0 1 0 0 ... 0 0 0 0 0 0 0 0 0 1   1 0 0 0 0 0 0 0 0 0 0 ... 0 0 0 1 0 1 0 0 1 0   2 0 0 1 1 1 0 0 1 0 0 ... 0 1 1 0 0 0 0 0 0 0   3 0 1 0 0 0 1 1 0 0 0 ... 1 0 0 0 2 0 0 0 0 1   4 0 0 0 0 0 0 0 1 2 1 ... 1 0 1 0 0 0 0 1 1 1   5 0 1 0 0 0 0 0 0 1 0 ... 0 1 0 1 0 0 0 0 0 1   6 0 0 0 1 0 2 0 0 0 1 ... 0 1 0 0 0 0 0 0 0 1   7 0 0 0 0 1 0 1 1 0 0 ... 0 1 0 0 1 0 0 0 1 0   8 0 0 1 0 1 0 0 0 0 0 ... 2 1 0 1 0 0 1 0 0 0   9 0 0 0 0 0 0 0 1 0 1 ... 0 0 1 1 2 2 0 0 0 0    10 rows × 31 columns\n parent[1]  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 29 30 31     0 2 0 0 2 0 0 0 0 1 0 ... 0 0 1 1 0 0 0 1 1 1   1 0 0 0 0 0 0 0 0 1 1 ... 0 0 0 0 1 0 1 0 0 0   2 0 0 1 1 0 0 0 0 0 0 ... 1 1 1 1 0 0 0 1 0 0   3 0 0 1 0 0 0 0 0 1 0 ... 1 0 0 0 2 0 1 0 0 0   4 0 0 0 0 0 0 0 0 2 0 ... 1 0 0 0 0 0 1 1 1 1   5 1 1 1 0 0 0 0 0 0 1 ... 0 0 0 0 0 0 0 0 0 1   6 0 0 0 1 1 2 0 0 1 0 ... 1 1 0 0 0 0 1 1 0 0   7 1 0 0 0 0 0 0 0 1 0 ... 0 0 0 0 1 0 0 1 0 0   8 0 0 0 0 0 0 1 0 0 0 ... 2 0 0 0 1 1 0 0 0 0   9 0 0 1 0 1 1 0 0 0 0 ... 1 0 0 0 2 2 0 0 0 0    10 rows × 31 columns\n ちゃんと入ってますね！\nかんすうべんり〜〜〜〜\n遺伝交配の関数を定義する 乱数の関数をよく使うので，再定義しよう！\ndef random(): return np.random.random() 遺伝交配の関数は。。。\ndef crossover(ep, sd, p1, p2): #ep:50%の一様交差の確率 #sd:突然変異 days = len(p1.columns) #一次元化 p1 = np.array(p1).flatten() p2 = np.array(p2).flatten() #子の変数 ch1 = [] ch2 = [] for p1_,p2_ in zip(p1,p2): x = True if ep \u0026gt; random() else False if x == True: #xだけでいい ch1.append(p1_) ch2.append(p2_) else: ch1.append(p2_) ch2.append(p1_) ch1, ch2 = mutation(sd, np.array(ch1).flatten(), np.array(ch2).flatten()) ch1 = pd.DataFrame(ch1.reshape(int(len(ch1)/days), days)) ch2 = pd.DataFrame(ch2.reshape(int(len(ch2)/days), days)) ch1.columns = [i+1 for i in range(len(ch1.columns))] ch2.columns = [i+1 for i in range(len(ch1.columns))] return ch1, ch2 引数４の関数です。\n 引数１つ目は，交差確率（通常は0.5） 引数２つ目は，突然変位の確率（好きに決めてね！） 引数３つ目は，親１ 引数４つ目は，親２  だよ！！！\nで，乱数は当然，毎回起動するごとに，返す値は違います！\nrandom() 0.20439575703798651  random() 0.678859899938455  random() 0.8028037056608043  なので，その性質を使って変数xが50%の確率で，Trueになって50%の確率でFalseになるようにしましょう！\nx = True if 0.5 \u0026gt; random() else False x False  x = True if 0.5 \u0026gt; random() else False x False  x = True if 0.5 \u0026gt; random() else False x False  これを使って親の個体の情報を子供１，子供２のどちらに入れるかを決めます！\nTrueならば「親１-\u0026gt; 子１」「親２ -\u0026gt; 子２」\nFalseならば「親１-\u0026gt; 子２」「親２ -\u0026gt; 子１」\nに遺伝子を渡すようにしましょう！それが\nif x == True: #xだけでいい ch1.append(p1_) ch2.append(p2_) else: ch1.append(p2_) ch2.append(p1_) の部分です。\n実際はx == Trueじゃなくてxで十分です！\n分かりやすいようにしてるだけです！\nzip関数 test_list1 = [i for i in range(10)] test_list2 = [i for i in range(10)] test_list1 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]  test_list2 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]  for n,m in zip(test_list1,test_list2): print(n,m) 0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9  つまり，２変数を同時にfor文で回せるようにするのがzip関数だと思ってください！\nここ↓の部分は突然変位についての記述のなので後述。\nch1, ch2 = mutation(sd, np.array(ch1).flatten(), np.array(ch2).flatten()) 今からここ↓について説明します！！\nch1 = pd.DataFrame(ch1.reshape(int(len(ch1)/days), days)) ch2 = pd.DataFrame(ch2.reshape(int(len(ch2)/days), days)) ch1.columns = [i+1 for i in range(len(ch1.columns))] ch2.columns = [i+1 for i in range(len(ch1.columns))] まず，reshape関数は$n$次元から$m$次元に変換する関数です。\nreshape関数について a = np.arange(8) a array([0, 1, 2, 3, 4, 5, 6, 7])  a.reshape(2,4) array([[0, 1, 2, 3], [4, 5, 6, 7]])  他にも便利な機能がたくさんあるけど，調べてね〜！（笑）\nまぁつまり，ch1は一度，flatten関数で一次元になってます。この場合，$10\\times 31=310$ のリストになってるはずです。\nそこで，310をdaysつまり，31で割ってそれを行数（縦の数）にしてるんですね！で，列数（横の数）はそのままdaysというわけです！\nで，一度，Pandasの表データからNumpyのリストデータに変換したので，pd.DataFrame( )でまたPandasの表データに戻しているというわけです！\n突然変位について def mutation(sd,ch1,ch2): x = True if sd \u0026gt; random() else False if x == True: rand = np.random.permutation([i for i in range(len(ch1))]) rand = rand[:int(len(ch1)//10)] for i in rand: if ch1[i] == 1: ch1[i] == 0 else: ch1[i] == 1 x = True if sd \u0026gt; random() else False if x == True: rand = np.random.permutation([i for i in range(len(ch2))]) rand = rand[:int(len(ch2)//10)] for i in rand: if ch2[i] == 1: ch2[i] == 0 else: ch2[i] == 1 return ch1, ch2 np.random.permutation()について ランダムに並び替える関数です\nx = np.array([i for i in range(10) ]) x array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])  np.random.permutation(x) array([7, 2, 4, 0, 6, 1, 5, 3, 8, 9])  リストの4番目以下を取り出す x[:4] array([0, 1, 2, 3])  リストの４（+1）番目以上を取り出す x[4:] array([4, 5, 6, 7, 8, 9])  //の演算 5//2 2  10//6 1  20//3 6  つまり，ここ↓では\nrand = np.random.permutation([i for i in range(len(ch1))]) rand = rand[:int(len(ch1)//10)] では，子１の10%の遺伝子を適当に取りだして，変数randに格納している！\nで，ここ↓で遺伝子に変更を加えている！\nfor i in rand: if ch1[i] == 1: ch1[i] == 0 else: ch1[i] == 1 遺伝交配のカクニン！ kiso, holiday = read_excel() parent = [] for i in range(2): kiso_copy = FirstCreateGenes(kiso, holiday) kiso_copy = HolidayFix(kiso_copy,holiday) parent.append(kiso_copy) ep = 0.5 sd = 0.05 ch1, ch2 = crossover(ep,sd,parent[0],parent[1]) ch1 = HolidayFix(ch1,holiday) ch2 = HolidayFix(ch2,holiday) ch1  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 29 30 31     0 2 0 0 2 0 0 1 1 0 1 ... 1 1 0 0 0 0 0 0 1 1   1 1 1 1 0 0 0 0 0 0 0 ... 0 0 0 0 1 0 0 0 0 0   2 0 0 0 1 0 0 0 0 1 0 ... 1 0 0 0 0 0 0 0 1 0   3 0 0 0 0 1 1 0 1 0 0 ... 0 0 0 1 2 0 0 0 0 0   4 0 0 0 0 0 0 0 0 2 0 ... 0 0 1 0 1 0 1 0 1 0   5 1 0 1 0 0 1 0 0 0 0 ... 0 0 1 0 0 0 0 1 1 1   6 0 0 1 0 1 2 1 0 1 0 ... 1 0 0 0 0 0 0 0 0 1   7 1 0 0 0 0 0 1 1 1 0 ... 1 0 0 0 0 1 0 1 0 0   8 0 0 0 1 0 0 0 1 0 1 ... 2 0 1 0 0 0 0 0 0 1   9 0 0 1 0 0 0 1 0 0 0 ... 0 0 0 1 2 2 0 0 0 1    10 rows × 31 columns\n ch2  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 29 30 31     0 2 0 0 2 0 0 1 0 0 0 ... 1 0 0 0 1 0 0 0 1 1   1 0 0 1 0 0 0 0 1 1 0 ... 0 0 0 1 0 0 0 0 1 1   2 1 0 0 0 1 0 0 0 1 0 ... 1 0 1 0 1 0 0 1 0 0   3 1 0 0 1 0 0 0 1 0 0 ... 0 0 0 0 2 0 0 0 0 1   4 0 0 1 0 0 1 0 1 2 0 ... 0 0 0 0 1 0 0 0 0 0   5 0 1 0 0 0 1 0 0 0 1 ... 0 0 1 0 0 1 0 0 1 0   6 0 0 0 1 1 2 0 0 0 0 ... 0 0 1 0 0 0 1 1 0 0   7 0 1 1 0 1 0 0 0 0 0 ... 1 0 0 0 0 0 0 0 1 0   8 0 0 0 0 0 0 0 1 0 0 ... 2 0 1 0 1 0 0 0 0 0   9 0 0 0 1 0 1 0 0 0 0 ... 1 1 0 1 2 2 0 0 0 0    10 rows × 31 columns\n プログラムを実行してみる！ kiso, holiday = read_excel() parent = [] for i in range(100): kiso_copy = FirstCreateGenes(kiso, holiday) kiso_copy = HolidayFix(kiso_copy,holiday) score = EvaluationFunc(kiso_copy) parent.append([score,kiso_copy]) （効率重視で）親の個体を100個作ってみました！\nparent[0] [-974.0, 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 1 0 0 0 0 ... 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 1 ... 0 0 0 1 1 1 0 2 1 0 0 0 0 0 1 0 1 0 ... 0 0 1 0 0 0 1 3 0 0 0 0 0 0 0 0 0 0 ... 0 0 1 1 2 1 0 4 0 1 1 0 0 0 0 0 2 0 ... 0 1 0 0 0 0 0 5 0 1 0 0 0 0 1 1 0 0 ... 1 1 1 0 0 0 0 6 0 0 0 1 0 2 0 0 0 1 ... 1 1 1 1 0 0 1 7 0 0 0 0 0 0 0 0 1 0 ... 1 0 0 1 0 0 1 8 0 0 1 1 0 1 0 0 0 1 ... 2 0 1 0 1 0 1 9 0 0 0 0 0 0 0 1 0 0 ... 1 1 1 1 2 2 0 29 30 31 0 1 0 1 1 0 0 0 2 0 1 1 3 0 0 0 4 0 0 0 5 0 0 0 6 0 0 0 7 0 0 0 8 0 0 0 9 0 0 0 [10 rows x 31 columns]]  parent[0][0] -974.0  elite_length = 20 #評価関数で点数の良かった20個体のみ残します！ gene_length = 50 #50世代まで遺伝的アルゴリズムを動かします！ ep = 0.5 #交差確率 sd = 0.05 #突然変異の確率 for i, j in parent: print(i,j) -974.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 1 0 0 0 0 ... 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 1 ... 0 0 0 1 1 1 0 2 1 0 0 0 0 0 1 0 1 0 ... 0 0 1 0 0 0 1 3 0 0 0 0 0 0 0 0 0 0 ... 0 0 1 1 2 1 0 4 0 1 1 0 0 0 0 0 2 0 ... 0 1 0 0 0 0 0 5 0 1 0 0 0 0 1 1 0 0 ... 1 1 1 0 0 0 0 6 0 0 0 1 0 2 0 0 0 1 ... 1 1 1 1 0 0 1 7 0 0 0 0 0 0 0 0 1 0 ... 1 0 0 1 0 0 1 8 0 0 1 1 0 1 0 0 0 1 ... 2 0 1 0 1 0 1 9 0 0 0 0 0 0 0 1 0 0 ... 1 1 1 1 2 2 0 29 30 31 0 1 0 1 1 0 0 0 2 0 1 1 3 0 0 0 4 0 0 0 5 0 0 0 6 0 0 0 7 0 0 0 8 0 0 0 9 0 0 0 [10 rows x 31 columns] -988.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 1 1 0 1 0 0 ... 0 0 0 0 1 1 0 1 0 0 0 1 0 1 0 0 0 1 ... 1 0 0 0 0 0 0 2 1 1 0 1 0 0 0 0 0 0 ... 0 0 0 0 1 0 0 3 0 0 0 0 0 0 0 0 0 0 ... 0 1 0 1 2 0 1 4 0 0 1 0 1 1 0 1 2 0 ... 0 0 0 0 0 0 0 5 0 1 1 0 0 0 1 0 0 0 ... 0 1 0 0 0 0 1 6 0 1 1 0 0 2 0 0 1 0 ... 1 0 0 0 0 0 0 7 1 0 0 1 1 1 0 0 0 0 ... 0 1 0 0 0 0 0 8 0 0 0 1 0 0 0 0 0 1 ... 2 1 0 0 0 1 0 9 1 0 0 0 0 0 0 0 0 0 ... 0 1 1 0 2 2 1 29 30 31 0 0 0 1 1 0 1 1 2 0 1 1 3 0 0 1 4 0 0 1 5 1 1 0 6 0 1 0 7 1 0 0 8 0 0 1 9 0 0 0 [10 rows x 31 columns] -811.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 1 1 2 0 0 1 0 1 0 ... 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 ... 1 0 0 0 0 0 0 2 0 0 1 0 0 1 0 1 0 0 ... 1 1 1 0 0 1 0 3 1 0 0 0 0 0 0 0 0 1 ... 1 1 0 0 2 0 0 4 0 0 0 0 0 1 1 1 2 0 ... 0 0 1 0 0 0 0 5 0 0 1 1 0 1 1 0 0 1 ... 0 0 1 0 0 0 0 6 0 0 0 0 1 2 1 0 0 1 ... 0 0 1 0 0 1 0 7 0 0 0 0 1 0 0 0 1 0 ... 0 0 0 0 0 0 0 8 0 0 1 0 0 0 0 1 0 1 ... 2 0 1 0 1 0 0 9 0 0 0 0 1 0 0 0 0 0 ... 0 0 0 1 2 2 0 29 30 31 0 0 0 0 1 0 0 0 2 0 1 0 3 0 0 0 4 0 1 0 5 1 0 0 6 0 0 0 7 1 1 1 8 0 0 0 9 1 1 0 [10 rows x 31 columns] -742.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 0 0 0 0 ... 1 1 0 1 0 0 0 1 1 1 0 0 1 0 0 0 0 0 ... 0 0 0 1 0 1 0 2 0 1 1 1 0 1 0 0 0 0 ... 1 0 0 0 0 1 0 3 0 0 0 0 0 1 0 0 0 0 ... 0 0 0 1 2 1 0 4 0 0 0 0 1 0 0 1 2 0 ... 0 0 0 0 0 0 0 5 1 1 0 1 0 0 0 1 0 0 ... 0 1 0 0 0 0 1 6 0 1 1 0 0 2 0 0 0 0 ... 0 1 0 0 0 0 1 7 1 1 1 0 0 0 0 0 1 0 ... 0 1 0 0 0 0 1 8 0 0 0 0 0 0 1 0 0 0 ... 2 0 0 1 0 1 0 9 1 0 0 0 0 0 0 0 0 0 ... 0 1 0 0 2 2 0 29 30 31 0 1 0 0 1 0 0 1 2 0 1 1 3 0 0 1 4 1 1 1 5 1 0 0 6 1 1 1 7 0 0 0 8 0 0 0 9 0 0 0 [10 rows x 31 columns] -892.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 1 0 2 0 0 1 0 0 1 ... 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 1 1 ... 0 0 0 0 0 0 0 2 0 0 0 0 1 0 0 1 0 0 ... 0 0 0 0 1 1 0 3 0 0 0 1 1 0 0 1 0 0 ... 0 0 0 0 2 0 0 4 0 0 0 1 1 1 0 0 2 1 ... 0 0 1 0 0 0 0 5 0 0 0 0 0 0 0 0 0 0 ... 0 1 0 1 1 0 0 6 0 0 0 0 1 2 0 0 0 0 ... 0 0 1 1 0 0 0 7 0 0 0 1 1 1 1 0 0 0 ... 0 0 0 1 1 0 0 8 0 1 1 0 1 0 0 0 1 0 ... 2 1 0 0 0 0 0 9 0 1 0 0 0 0 0 1 1 0 ... 0 0 1 1 2 2 0 29 30 31 0 0 0 0 1 0 0 0 2 0 0 0 3 1 0 0 4 0 0 0 5 0 0 1 6 0 1 0 7 0 0 0 8 0 0 1 9 1 1 0 [10 rows x 31 columns] -764.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 1 2 1 0 0 1 0 0 ... 0 1 0 0 1 0 0 1 0 0 1 0 1 1 0 0 1 0 ... 0 0 0 0 0 0 0 2 0 0 0 1 1 0 1 0 0 0 ... 0 1 0 1 0 0 1 3 0 1 0 0 0 0 1 0 0 0 ... 0 1 0 0 2 0 1 4 0 0 0 0 0 1 0 0 2 1 ... 0 0 0 0 1 0 1 5 0 1 0 0 1 1 0 0 1 0 ... 0 1 0 0 0 0 1 6 0 0 0 0 0 2 1 0 0 0 ... 0 1 0 0 1 0 0 7 0 0 0 0 0 0 0 1 1 0 ... 0 1 1 0 0 0 1 8 0 0 1 0 0 1 1 0 0 1 ... 2 0 0 0 1 1 0 9 1 0 1 0 0 0 1 0 1 0 ... 0 0 0 1 2 2 1 29 30 31 0 0 0 0 1 0 0 0 2 0 0 1 3 0 0 0 4 1 0 0 5 0 1 0 6 0 0 1 7 0 0 0 8 0 0 0 9 0 0 0 [10 rows x 31 columns] -792.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 1 0 0 0 0 ... 0 1 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 1 ... 0 0 0 1 0 0 0 2 0 0 0 0 0 1 1 1 1 1 ... 0 1 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 ... 1 0 0 0 2 1 1 4 0 0 0 0 0 0 0 1 2 0 ... 0 0 0 0 1 0 0 5 0 0 1 0 0 1 0 0 0 0 ... 1 0 0 0 0 0 0 6 0 0 0 0 1 2 0 0 1 0 ... 0 0 1 1 0 0 0 7 0 0 0 1 1 1 1 0 0 0 ... 0 0 0 0 0 0 0 8 0 1 0 0 0 0 0 1 0 0 ... 2 0 0 1 0 1 0 9 0 0 0 1 1 0 0 0 0 1 ... 0 0 0 0 2 2 0 29 30 31 0 0 0 1 1 1 1 0 2 0 0 1 3 0 0 0 4 0 1 0 5 0 1 1 6 0 1 1 7 0 0 0 8 0 1 1 9 0 1 0 [10 rows x 31 columns] -718.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 1 0 2 0 0 0 0 0 0 ... 1 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 0 0 ... 0 0 0 1 0 0 0 2 0 0 0 1 0 0 0 0 0 0 ... 1 1 0 1 0 0 1 3 0 0 1 1 0 1 0 0 0 0 ... 0 0 0 0 2 0 0 4 0 0 1 0 1 0 0 0 2 0 ... 0 1 0 0 0 0 0 5 0 0 0 0 0 0 0 1 0 0 ... 0 1 0 1 0 1 0 6 1 0 0 0 0 2 0 0 1 0 ... 0 0 0 1 1 0 1 7 0 0 0 0 0 1 0 0 0 0 ... 0 0 1 0 1 0 0 8 0 0 0 0 1 0 0 0 0 0 ... 2 1 0 0 0 1 0 9 0 0 0 1 1 0 0 0 0 0 ... 0 1 0 0 2 2 1 29 30 31 0 0 0 0 1 1 0 0 2 0 0 1 3 1 1 0 4 0 0 1 5 1 0 1 6 0 0 0 7 0 0 0 8 1 1 1 9 0 0 1 [10 rows x 31 columns] -777.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 1 0 0 0 ... 0 1 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 ... 0 1 0 1 0 1 0 2 0 0 1 0 1 0 1 0 1 0 ... 0 0 0 0 0 0 1 3 0 0 1 0 0 0 0 0 0 1 ... 1 0 0 0 2 0 0 4 0 0 0 1 0 0 1 0 2 0 ... 0 1 0 0 0 0 0 5 1 0 1 0 0 0 1 1 0 0 ... 0 0 0 0 1 0 0 6 0 0 1 1 1 2 0 1 0 1 ... 0 0 0 0 0 1 1 7 0 1 1 1 0 0 0 1 0 0 ... 0 0 0 1 0 0 0 8 0 0 1 1 0 0 0 0 1 0 ... 2 1 1 0 1 0 0 9 0 0 0 0 0 0 0 0 1 0 ... 1 0 1 0 2 2 0 29 30 31 0 0 0 0 1 0 0 0 2 0 1 0 3 0 0 0 4 0 1 0 5 1 0 0 6 1 0 0 7 0 0 0 8 1 0 0 9 0 0 0 [10 rows x 31 columns] -722.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 1 2 0 1 1 0 1 0 ... 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 1 ... 0 1 0 0 0 0 0 2 0 0 0 0 1 0 0 1 0 1 ... 0 1 1 0 0 0 1 3 0 0 0 0 0 0 0 0 1 1 ... 0 0 0 1 2 0 0 4 0 0 0 1 1 0 0 1 2 0 ... 0 0 1 0 0 0 0 5 0 0 0 0 0 0 0 1 0 0 ... 0 1 0 0 0 0 1 6 0 1 1 0 0 2 0 0 0 1 ... 0 0 0 1 1 1 0 7 0 0 0 1 0 0 0 0 0 0 ... 1 0 1 0 0 1 0 8 0 1 0 0 0 0 1 1 1 0 ... 2 0 1 0 0 0 0 9 0 1 0 0 0 0 0 0 0 0 ... 0 1 0 1 2 2 0 29 30 31 0 0 0 0 1 0 0 1 2 0 1 0 3 0 1 0 4 0 0 1 5 0 0 1 6 0 0 0 7 0 1 0 8 0 0 1 9 0 0 0 [10 rows x 31 columns] -717.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 0 1 0 0 ... 1 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 ... 0 0 1 0 0 0 0 2 0 0 1 0 1 0 0 0 1 0 ... 0 0 0 0 1 0 1 3 0 0 0 0 0 1 0 0 0 0 ... 1 0 0 0 2 0 0 4 0 0 0 0 0 0 0 1 2 1 ... 0 1 1 0 0 0 0 5 0 0 1 0 0 0 0 0 0 1 ... 0 0 1 0 1 1 1 6 0 1 0 1 0 2 1 0 0 0 ... 0 0 1 0 1 0 0 7 0 0 0 0 1 0 0 1 1 0 ... 0 1 0 0 1 0 0 8 0 1 0 0 1 0 0 0 0 1 ... 2 0 0 0 1 0 0 9 0 0 1 0 0 0 0 0 1 1 ... 1 1 0 0 2 2 0 29 30 31 0 0 0 0 1 0 1 0 2 0 0 1 3 0 0 0 4 0 0 1 5 0 1 1 6 0 0 0 7 0 0 0 8 0 0 0 9 0 0 1 [10 rows x 31 columns] -881.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 1 0 2 0 1 1 0 1 0 ... 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 0 0 ... 1 0 0 0 0 0 0 2 1 0 0 0 0 0 0 0 1 1 ... 1 0 0 0 0 1 0 3 1 1 1 0 0 0 0 0 0 0 ... 1 0 1 0 2 0 1 4 0 0 1 0 0 0 0 0 2 0 ... 0 1 1 1 0 0 0 5 1 0 1 1 0 0 0 0 1 0 ... 0 0 0 0 1 0 0 6 0 0 0 1 0 2 1 0 1 0 ... 0 0 1 1 0 0 0 7 0 0 0 0 0 0 0 0 0 0 ... 0 1 1 0 1 1 0 8 0 1 0 0 0 0 0 0 1 1 ... 2 0 0 0 1 0 1 9 0 0 0 0 0 1 0 0 1 1 ... 0 0 0 0 2 2 0 29 30 31 0 0 1 0 1 0 0 1 2 1 0 0 3 0 0 0 4 0 0 0 5 0 0 0 6 0 1 0 7 0 0 0 8 0 0 1 9 0 0 0 [10 rows x 31 columns] -834.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 1 1 0 0 0 0 ... 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 1 0 ... 0 0 0 1 0 0 0 2 1 0 0 1 0 1 1 0 0 0 ... 0 1 0 0 1 0 1 3 0 0 0 0 0 0 0 0 0 0 ... 0 0 0 0 2 0 1 4 0 0 0 1 0 0 0 1 2 0 ... 0 0 1 0 0 0 1 5 0 0 0 1 1 0 0 0 0 0 ... 0 0 1 0 1 1 0 6 0 0 0 0 0 2 0 1 0 0 ... 0 0 0 0 0 0 0 7 0 1 1 0 0 0 0 0 0 0 ... 0 1 0 0 0 1 0 8 0 0 0 0 0 1 0 1 0 0 ... 2 0 0 0 1 0 1 9 0 0 0 0 0 1 0 1 1 0 ... 0 0 0 0 2 2 0 29 30 31 0 1 0 0 1 1 0 0 2 0 0 0 3 1 1 1 4 1 0 1 5 0 0 0 6 1 1 0 7 0 0 0 8 0 0 0 9 1 0 0 [10 rows x 31 columns] -689.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 1 0 2 0 0 0 1 0 0 ... 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0 ... 1 1 0 0 1 0 0 2 0 1 0 0 1 0 0 0 0 1 ... 0 1 0 0 0 1 0 3 0 1 0 1 0 1 0 0 0 0 ... 1 1 0 0 2 0 0 4 0 0 0 0 1 1 0 0 2 0 ... 0 0 0 1 0 1 0 5 1 0 0 0 0 0 1 0 0 1 ... 0 0 0 0 1 1 0 6 1 0 0 1 0 2 0 0 0 0 ... 0 1 1 1 0 0 0 7 1 0 0 0 0 0 0 0 0 0 ... 1 0 0 1 0 0 1 8 0 1 1 0 0 0 0 0 0 0 ... 2 1 1 0 0 0 0 9 0 0 0 1 1 0 0 1 0 0 ... 0 1 0 1 2 2 0 29 30 31 0 1 1 0 1 0 0 1 2 0 0 1 3 0 0 0 4 0 0 0 5 1 0 0 6 0 0 1 7 0 0 0 8 0 0 1 9 0 0 0 [10 rows x 31 columns] -743.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 1 2 0 0 0 0 0 1 ... 1 0 0 0 0 0 0 1 0 0 1 1 1 0 0 0 0 0 ... 0 1 0 0 0 0 0 2 0 1 1 0 0 0 0 0 1 1 ... 0 1 0 0 0 0 0 3 1 0 0 0 1 0 0 0 1 0 ... 0 0 1 0 2 0 0 4 1 0 1 1 0 0 0 0 2 0 ... 0 0 0 0 0 0 0 5 0 0 0 0 1 0 0 0 0 0 ... 0 0 1 0 1 0 1 6 0 0 0 0 0 2 0 1 1 0 ... 1 0 1 0 1 0 0 7 0 0 1 1 0 0 0 0 0 0 ... 1 0 0 0 0 0 1 8 1 0 0 0 0 0 0 0 1 0 ... 2 0 0 0 0 0 0 9 0 1 0 0 1 0 0 0 0 0 ... 1 0 0 0 2 2 0 29 30 31 0 0 0 0 1 1 0 0 2 1 0 0 3 0 0 0 4 0 0 1 5 0 0 1 6 0 0 1 7 0 0 0 8 0 1 1 9 0 0 1 [10 rows x 31 columns] -852.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 0 1 0 0 ... 0 0 1 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 ... 0 0 0 0 0 0 0 2 0 0 1 0 1 0 1 0 1 1 ... 0 0 0 0 0 0 0 3 0 0 0 1 0 0 0 0 0 0 ... 1 0 1 0 2 1 0 4 0 0 0 0 0 0 1 0 2 0 ... 0 0 0 1 0 0 1 5 0 1 0 1 0 1 1 0 0 0 ... 1 0 0 0 0 0 0 6 1 1 1 1 0 2 0 0 0 1 ... 1 0 1 0 0 0 0 7 0 0 1 0 0 1 0 1 1 0 ... 1 0 0 0 1 0 0 8 1 0 1 1 0 0 0 0 0 1 ... 2 0 0 0 1 0 0 9 0 1 0 0 1 0 0 1 1 0 ... 0 0 0 0 2 2 0 29 30 31 0 0 0 0 1 0 0 0 2 0 0 1 3 0 0 0 4 0 0 1 5 0 0 1 6 0 0 0 7 0 0 0 8 0 0 0 9 0 0 1 [10 rows x 31 columns] -809.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 1 2 0 0 0 0 0 0 ... 0 0 0 1 0 1 1 1 0 0 0 1 1 0 0 0 0 0 ... 0 0 0 0 0 0 1 2 0 1 1 0 1 1 0 0 0 0 ... 0 1 1 0 1 0 0 3 0 0 0 0 1 0 0 0 0 1 ... 0 1 0 0 2 0 0 4 1 0 1 0 0 0 0 0 2 1 ... 1 1 0 0 1 0 0 5 1 1 0 1 0 0 1 1 1 0 ... 0 0 0 0 0 0 0 6 1 1 0 1 0 2 0 0 1 0 ... 1 0 0 0 0 0 1 7 0 0 0 0 0 0 0 0 1 0 ... 0 0 0 1 1 0 0 8 1 0 0 0 1 0 1 0 0 0 ... 2 0 0 1 1 0 0 9 0 0 0 0 0 0 0 0 0 0 ... 1 0 1 0 2 2 0 29 30 31 0 0 0 0 1 0 0 0 2 1 0 0 3 1 1 0 4 0 0 0 5 0 1 0 6 0 0 1 7 0 0 1 8 0 0 0 9 1 1 0 [10 rows x 31 columns] -830.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 1 0 0 1 0 0 ... 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 ... 1 0 0 1 0 0 0 2 1 0 0 0 1 0 0 0 0 1 ... 0 1 0 0 0 0 0 3 0 1 1 0 0 0 0 0 0 1 ... 0 0 1 0 2 0 0 4 1 1 0 1 0 0 0 1 2 1 ... 0 0 0 0 0 0 0 5 0 0 0 1 0 1 0 0 0 0 ... 0 0 0 1 1 0 0 6 1 0 1 1 0 2 1 0 0 1 ... 0 1 0 0 1 0 0 7 0 0 0 0 0 0 0 0 0 0 ... 1 0 0 0 0 1 0 8 1 0 0 1 0 0 1 1 0 0 ... 2 0 0 0 0 0 0 9 1 0 0 0 1 0 0 0 1 0 ... 0 0 0 0 2 2 0 29 30 31 0 0 0 0 1 0 0 1 2 0 0 0 3 0 0 0 4 0 1 0 5 1 0 0 6 0 0 0 7 1 0 1 8 0 0 1 9 1 0 0 [10 rows x 31 columns] -687.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 1 0 0 1 ... 0 0 0 0 1 1 0 1 1 0 0 0 0 1 0 1 0 0 ... 0 0 0 0 0 0 1 2 0 0 1 0 0 0 0 0 0 1 ... 1 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 ... 0 0 1 0 2 0 0 4 0 0 1 0 0 1 1 0 2 0 ... 1 0 0 1 0 0 0 5 0 0 0 0 1 0 0 0 1 0 ... 1 0 0 0 0 0 1 6 0 0 1 0 0 2 0 0 1 0 ... 1 0 0 1 0 1 0 7 0 0 0 0 0 0 0 1 1 0 ... 0 1 0 0 0 0 1 8 0 0 0 0 0 1 0 0 0 1 ... 2 0 1 0 0 1 0 9 0 1 0 1 0 0 0 0 1 0 ... 0 0 0 1 2 2 1 29 30 31 0 0 0 1 1 0 0 1 2 1 0 1 3 0 1 0 4 0 0 1 5 0 1 1 6 1 0 1 7 1 0 1 8 1 0 0 9 0 0 0 [10 rows x 31 columns] -745.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 1 0 0 0 ... 0 0 0 1 0 0 1 1 0 0 0 0 0 0 1 0 0 0 ... 0 0 0 0 0 0 1 2 1 0 0 0 0 0 0 0 0 0 ... 1 1 0 1 0 0 1 3 0 0 0 1 0 0 1 0 0 0 ... 1 0 1 0 2 0 0 4 1 0 0 0 1 0 0 0 2 1 ... 0 0 0 0 1 0 1 5 0 0 0 1 0 0 1 0 0 0 ... 1 0 0 0 0 0 0 6 0 1 1 1 1 2 1 0 0 0 ... 0 0 0 0 0 1 0 7 0 0 0 1 0 1 0 0 0 0 ... 0 0 0 0 1 0 0 8 0 0 1 1 0 1 1 1 0 0 ... 2 0 0 1 0 0 0 9 0 0 0 0 0 0 1 1 0 0 ... 0 1 0 0 2 2 1 29 30 31 0 1 0 0 1 1 0 0 2 0 0 0 3 0 0 0 4 1 0 0 5 1 1 1 6 0 1 0 7 0 0 1 8 0 0 1 9 0 0 0 [10 rows x 31 columns] -574.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 0 1 0 0 ... 0 0 0 1 0 0 0 1 0 0 0 1 1 0 0 0 0 0 ... 1 0 0 0 0 0 1 2 1 0 0 1 1 0 1 0 0 0 ... 0 1 1 0 0 0 0 3 0 0 0 0 1 0 0 0 0 0 ... 0 0 1 0 2 0 0 4 1 0 1 0 0 0 0 0 2 0 ... 1 0 0 0 0 0 1 5 0 1 1 1 0 0 0 0 0 1 ... 0 0 0 0 1 0 0 6 0 1 0 1 0 2 1 0 0 0 ... 0 0 0 0 0 1 1 7 0 0 0 0 0 0 1 1 0 0 ... 0 0 0 0 1 0 0 8 0 1 0 0 0 0 0 0 1 1 ... 2 0 0 1 0 1 0 9 0 0 0 0 0 1 0 0 0 1 ... 0 0 0 1 2 2 1 29 30 31 0 0 0 1 1 0 0 0 2 1 0 1 3 0 1 0 4 0 0 0 5 1 0 1 6 0 0 0 7 0 0 1 8 0 0 0 9 0 0 0 [10 rows x 31 columns] -767.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 1 2 0 0 0 0 1 0 ... 0 0 0 1 0 0 1 1 0 0 0 0 1 0 0 0 0 0 ... 0 1 0 0 0 1 0 2 0 1 0 0 1 0 1 0 0 1 ... 0 1 0 0 1 0 1 3 1 0 0 0 0 1 0 0 0 0 ... 1 0 0 0 2 0 1 4 1 0 0 0 0 1 0 0 2 0 ... 0 0 0 0 0 1 1 5 1 1 0 1 1 0 0 1 1 0 ... 0 0 0 0 0 0 0 6 0 1 0 1 0 2 0 0 0 0 ... 1 0 1 1 0 0 0 7 0 0 0 0 0 0 0 0 0 1 ... 0 0 0 1 0 1 0 8 1 0 0 0 0 0 0 0 1 0 ... 2 0 1 0 1 0 0 9 0 0 0 0 0 1 1 0 0 1 ... 0 0 1 0 2 2 1 29 30 31 0 0 0 0 1 1 0 0 2 0 0 0 3 0 0 0 4 1 1 0 5 0 0 0 6 0 0 0 7 0 0 0 8 1 0 0 9 0 0 0 [10 rows x 31 columns] -809.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 1 0 2 0 0 0 0 0 1 ... 0 1 0 0 0 0 0 1 0 0 0 1 1 0 1 1 1 0 ... 0 0 0 0 0 1 0 2 0 1 1 1 0 0 1 0 0 0 ... 0 0 0 1 0 0 0 3 0 0 0 0 0 0 0 0 0 0 ... 0 0 1 0 2 0 0 4 0 1 0 0 1 1 1 0 2 0 ... 0 1 0 0 0 1 0 5 0 0 0 0 1 0 1 0 0 0 ... 0 0 0 1 0 0 1 6 0 0 0 0 0 2 0 0 1 1 ... 1 0 0 1 0 0 0 7 0 0 0 0 0 1 0 1 0 1 ... 0 0 0 1 0 0 0 8 1 0 0 0 0 0 1 0 0 0 ... 2 1 0 0 0 0 0 9 1 0 0 0 0 0 0 0 0 0 ... 1 0 1 0 2 2 0 29 30 31 0 0 0 1 1 0 0 0 2 0 0 0 3 0 0 0 4 0 1 0 5 1 0 1 6 0 0 0 7 1 0 0 8 0 0 0 9 0 0 0 [10 rows x 31 columns] -860.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 1 1 2 0 1 0 0 1 0 ... 0 0 0 0 0 0 0 1 0 1 0 1 1 0 0 0 0 0 ... 0 0 0 0 1 0 0 2 0 0 0 0 0 1 0 1 0 0 ... 1 1 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 ... 0 1 0 0 2 1 0 4 1 0 0 0 1 1 1 0 2 0 ... 0 0 0 0 0 1 0 5 0 1 1 0 0 1 0 0 0 1 ... 0 1 1 1 0 0 0 6 0 0 0 1 0 2 0 1 1 1 ... 0 0 1 0 0 0 0 7 1 0 1 0 0 0 0 0 0 0 ... 0 0 0 0 1 0 0 8 0 0 0 1 0 0 0 0 1 0 ... 2 1 1 0 0 0 0 9 0 0 0 0 1 0 0 1 1 0 ... 0 0 1 0 2 2 0 29 30 31 0 0 0 0 1 0 0 0 2 1 1 0 3 1 0 0 4 0 0 1 5 0 0 0 6 0 0 1 7 0 0 0 8 0 0 1 9 0 0 1 [10 rows x 31 columns] -814.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 1 1 0 1 1 ... 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 1 0 0 ... 0 0 0 0 1 0 0 2 0 0 0 0 1 0 0 0 0 0 ... 1 0 1 0 1 0 0 3 0 0 0 0 0 0 1 0 0 0 ... 0 0 0 0 2 0 0 4 0 0 1 0 0 0 0 0 2 0 ... 0 1 0 1 1 0 1 5 0 0 0 1 0 1 1 0 1 0 ... 0 0 1 1 0 0 0 6 0 0 1 1 0 2 0 0 0 0 ... 0 1 1 0 1 0 0 7 0 0 0 1 0 0 0 0 0 0 ... 0 0 0 0 0 0 0 8 0 0 1 0 0 0 1 1 1 0 ... 2 1 0 0 0 0 0 9 0 0 0 0 0 1 0 0 0 0 ... 1 0 1 0 2 2 0 29 30 31 0 1 0 0 1 0 0 0 2 1 1 1 3 1 0 0 4 0 0 0 5 0 0 1 6 1 0 1 7 0 0 0 8 0 0 1 9 0 0 1 [10 rows x 31 columns] -652.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 0 0 0 0 ... 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 0 1 0 ... 1 0 0 0 0 0 0 2 0 0 0 1 1 0 0 0 1 0 ... 0 0 0 0 0 0 1 3 0 0 0 1 1 0 0 0 0 0 ... 0 0 0 0 2 1 0 4 0 1 1 0 0 0 0 0 2 0 ... 1 0 0 0 1 0 0 5 0 0 1 0 0 0 0 1 0 0 ... 1 0 0 1 0 1 0 6 0 0 0 0 0 2 0 1 0 0 ... 1 1 0 0 0 0 0 7 0 0 0 1 0 1 0 1 0 0 ... 0 0 0 0 0 1 0 8 0 0 1 0 1 0 0 1 0 1 ... 2 1 0 0 0 0 0 9 1 0 0 1 0 0 0 0 0 0 ... 0 1 0 1 2 2 0 29 30 31 0 0 1 0 1 1 0 0 2 0 1 0 3 1 0 0 4 0 1 0 5 0 0 0 6 0 0 1 7 1 0 1 8 0 1 0 9 0 0 0 [10 rows x 31 columns] -700.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 0 0 0 0 ... 0 1 0 0 1 1 0 1 1 0 1 0 0 1 0 0 0 0 ... 0 0 0 0 0 0 0 2 1 0 0 0 1 0 0 0 1 1 ... 0 0 1 0 0 0 1 3 0 0 0 1 1 0 0 1 0 1 ... 0 0 0 0 2 0 0 4 1 0 0 1 0 0 0 0 2 0 ... 1 1 1 0 0 0 0 5 0 0 0 1 0 0 0 1 0 1 ... 0 1 1 0 0 0 0 6 0 0 1 0 0 2 1 0 0 0 ... 0 1 0 0 1 0 0 7 0 1 1 0 0 0 0 0 0 0 ... 0 1 0 0 0 1 0 8 0 0 0 0 0 0 1 0 1 1 ... 2 0 0 0 1 0 0 9 0 0 0 0 0 0 0 0 0 1 ... 0 1 0 1 2 2 0 29 30 31 0 0 0 0 1 1 1 0 2 0 0 1 3 0 1 0 4 0 0 0 5 0 0 1 6 0 1 0 7 1 0 0 8 1 0 1 9 0 0 0 [10 rows x 31 columns] -985.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 1 0 0 0 0 ... 0 1 0 1 1 0 0 1 0 1 0 0 0 1 0 0 0 1 ... 0 0 0 0 0 0 0 2 1 0 0 0 0 0 0 0 0 0 ... 1 0 1 0 0 0 1 3 0 0 0 0 0 0 0 0 1 1 ... 1 0 0 0 2 0 0 4 0 0 0 0 0 0 0 0 2 1 ... 1 0 0 0 0 1 0 5 1 1 0 0 1 1 0 0 0 1 ... 0 0 0 1 0 0 0 6 1 0 0 0 0 2 1 1 0 0 ... 1 0 0 0 0 0 0 7 0 0 0 0 0 0 0 1 0 0 ... 0 1 0 0 0 0 1 8 1 0 1 1 0 1 0 1 0 0 ... 2 1 1 1 0 0 0 9 0 0 0 0 1 0 0 0 0 0 ... 0 0 1 0 2 2 1 29 30 31 0 0 0 0 1 0 1 0 2 0 0 0 3 0 0 0 4 0 1 1 5 0 0 0 6 0 1 0 7 0 1 0 8 0 0 0 9 1 1 0 [10 rows x 31 columns] -970.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 1 2 0 0 0 0 0 0 ... 1 0 0 0 1 0 0 1 0 1 1 1 0 1 1 0 0 1 ... 0 0 0 0 0 0 0 2 0 0 1 1 1 0 0 0 0 0 ... 0 1 0 0 0 1 0 3 0 1 0 0 0 0 1 0 0 0 ... 0 0 0 0 2 0 0 4 0 1 1 0 0 0 0 0 2 0 ... 0 1 0 0 0 1 1 5 0 1 0 0 0 0 0 1 0 0 ... 0 1 1 0 0 0 0 6 1 0 0 0 0 2 0 0 0 1 ... 1 1 0 0 0 0 0 7 0 0 0 0 0 0 0 1 0 0 ... 0 0 0 0 0 1 1 8 0 0 0 0 0 0 1 0 0 0 ... 2 1 1 1 1 0 1 9 0 0 0 0 0 1 0 1 0 0 ... 0 0 0 0 2 2 0 29 30 31 0 0 0 0 1 0 0 0 2 0 1 1 3 0 0 0 4 0 0 0 5 0 0 1 6 0 0 0 7 0 1 1 8 1 0 0 9 0 1 0 [10 rows x 31 columns] -739.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 1 1 1 0 0 0 ... 0 0 0 1 0 0 1 1 0 1 0 0 0 0 0 1 1 0 ... 0 0 1 0 0 0 0 2 1 0 1 0 0 0 0 0 0 0 ... 1 1 0 0 0 1 0 3 1 0 1 0 0 0 0 0 0 0 ... 1 0 1 0 2 0 0 4 0 0 0 0 1 1 0 0 2 0 ... 0 1 0 0 0 1 1 5 0 1 1 0 0 0 0 0 1 1 ... 0 1 0 0 0 0 0 6 1 0 0 0 1 2 0 0 1 0 ... 0 0 1 0 0 1 0 7 1 0 1 1 0 0 0 0 1 0 ... 0 0 1 0 1 0 0 8 1 0 0 0 1 0 0 0 1 0 ... 2 0 0 0 0 0 0 9 1 1 0 0 0 0 0 0 0 0 ... 0 0 1 0 2 2 1 29 30 31 0 0 0 0 1 0 1 0 2 0 0 0 3 0 1 0 4 0 0 0 5 1 1 0 6 1 0 0 7 0 0 0 8 0 1 1 9 0 0 0 [10 rows x 31 columns] -1080.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 1 0 2 0 0 0 0 0 0 ... 0 0 1 1 0 1 0 1 0 1 0 0 0 0 0 1 0 0 ... 0 0 0 0 0 0 0 2 1 0 1 0 0 0 0 0 1 1 ... 1 0 0 1 0 0 0 3 0 0 1 0 0 0 0 0 0 0 ... 0 0 0 0 2 0 1 4 0 1 0 0 0 0 0 0 2 1 ... 0 0 0 0 1 1 0 5 0 0 0 0 0 0 0 0 0 0 ... 1 0 1 0 1 1 0 6 0 0 0 0 0 2 1 0 1 0 ... 0 1 1 1 0 0 0 7 1 0 0 0 0 0 0 0 0 0 ... 0 1 0 0 0 1 0 8 0 1 0 0 0 0 0 0 1 0 ... 2 0 0 1 0 1 0 9 0 1 0 0 0 0 1 0 1 0 ... 0 0 0 0 2 2 0 29 30 31 0 0 0 1 1 1 0 1 2 0 0 1 3 0 0 1 4 1 0 0 5 0 0 0 6 1 0 1 7 1 0 0 8 0 1 0 9 0 1 0 [10 rows x 31 columns] -797.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 1 1 2 0 0 0 0 1 1 ... 0 0 0 0 0 0 0 1 0 1 0 0 0 0 1 0 0 0 ... 0 0 0 0 1 0 1 2 1 0 0 1 1 0 0 0 0 1 ... 0 0 0 0 0 1 0 3 0 1 0 0 1 0 0 0 0 1 ... 0 0 0 0 2 1 0 4 1 0 0 0 0 1 0 0 2 1 ... 1 0 0 1 0 0 0 5 0 0 1 1 0 0 0 1 0 0 ... 1 1 0 1 0 1 0 6 0 0 1 0 1 2 0 1 0 0 ... 1 1 0 0 0 0 0 7 1 0 1 0 1 1 0 0 0 0 ... 0 1 0 1 0 0 0 8 0 0 0 0 0 0 1 0 0 0 ... 2 1 0 1 1 1 0 9 0 0 1 0 0 0 1 0 1 0 ... 0 1 0 0 2 2 0 29 30 31 0 0 1 0 1 0 0 0 2 1 0 0 3 1 1 0 4 1 0 1 5 0 1 0 6 0 0 0 7 0 0 0 8 0 0 0 9 0 0 0 [10 rows x 31 columns] -727.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 0 1 0 1 ... 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 ... 0 0 0 1 0 1 0 2 0 0 0 0 0 1 0 1 0 1 ... 0 1 0 0 0 1 0 3 0 1 0 0 0 0 1 0 1 0 ... 0 0 0 1 2 0 0 4 1 1 0 0 0 0 0 1 2 0 ... 1 0 0 1 0 0 0 5 0 0 1 0 0 1 1 0 1 0 ... 0 1 0 0 0 1 0 6 0 1 0 0 1 2 0 0 0 1 ... 0 0 1 0 0 0 0 7 0 0 0 1 1 1 0 1 1 0 ... 0 0 0 0 0 1 0 8 1 1 0 0 0 1 0 1 0 0 ... 2 0 0 1 0 0 0 9 0 1 0 1 0 0 0 0 1 0 ... 0 0 0 0 2 2 0 29 30 31 0 0 0 0 1 0 0 1 2 1 0 1 3 0 0 1 4 0 0 0 5 0 0 1 6 0 0 1 7 0 0 0 8 0 1 0 9 0 1 0 [10 rows x 31 columns] -533.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 1 1 0 0 0 1 ... 1 0 1 0 0 0 1 1 1 0 0 1 0 0 0 1 0 0 ... 0 0 1 0 0 1 0 2 0 0 0 1 0 0 0 0 0 0 ... 0 0 0 1 0 0 1 3 0 0 0 0 1 1 0 0 0 1 ... 0 0 0 0 2 0 1 4 1 1 0 0 0 0 1 0 2 0 ... 0 1 1 0 0 0 1 5 1 0 0 1 0 0 1 1 0 1 ... 0 0 0 0 1 0 0 6 0 0 0 0 1 2 1 0 0 0 ... 1 1 0 0 1 0 1 7 0 0 1 0 0 1 0 0 1 0 ... 1 0 1 0 0 0 0 8 0 1 0 0 1 0 0 1 0 1 ... 2 1 0 0 0 0 0 9 0 0 0 1 1 0 0 0 0 0 ... 0 1 0 0 2 2 1 29 30 31 0 0 0 0 1 0 0 0 2 0 1 1 3 0 0 0 4 0 0 1 5 0 0 0 6 0 0 0 7 0 0 0 8 0 0 0 9 1 0 0 [10 rows x 31 columns] -631.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 0 0 1 0 ... 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 ... 0 0 1 1 0 0 0 2 0 0 0 1 1 0 0 0 0 0 ... 1 1 0 0 0 0 1 3 0 0 0 0 0 1 0 0 0 0 ... 0 1 0 0 2 0 1 4 0 0 0 0 1 1 0 0 2 0 ... 0 1 0 1 0 0 1 5 0 1 0 1 0 0 0 0 0 1 ... 0 1 0 0 0 0 0 6 1 0 1 0 0 2 0 1 0 0 ... 1 1 1 0 0 0 1 7 0 0 0 0 0 0 0 0 0 1 ... 1 0 0 0 1 0 1 8 0 0 1 0 0 1 1 0 0 1 ... 2 0 0 1 0 0 0 9 1 0 0 0 0 0 0 0 1 1 ... 1 0 0 0 2 2 0 29 30 31 0 0 0 0 1 0 1 0 2 1 1 0 3 0 1 1 4 0 0 1 5 0 1 0 6 0 0 1 7 0 0 1 8 0 0 0 9 0 0 0 [10 rows x 31 columns] -819.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 1 0 1 0 0 0 ... 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 1 1 ... 0 0 0 0 0 0 0 2 1 0 0 0 0 0 1 0 1 1 ... 1 0 0 0 0 0 0 3 0 0 1 0 1 0 0 0 0 0 ... 0 0 0 0 2 1 0 4 0 1 0 0 0 0 1 0 2 0 ... 0 1 0 0 0 0 0 5 0 1 1 0 0 0 1 0 0 0 ... 1 0 1 0 0 0 0 6 0 0 0 1 1 2 0 1 0 1 ... 1 0 0 0 0 1 0 7 0 0 0 0 0 0 1 1 0 1 ... 0 1 0 0 1 0 0 8 0 0 1 0 1 0 1 0 0 0 ... 2 1 0 1 0 0 0 9 1 0 1 0 0 0 0 0 0 0 ... 0 0 0 1 2 2 0 29 30 31 0 0 1 1 1 1 1 0 2 0 0 0 3 0 1 1 4 0 0 0 5 1 0 0 6 0 0 0 7 0 0 0 8 0 0 0 9 0 1 0 [10 rows x 31 columns] -715.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 0 0 1 0 ... 0 1 0 0 0 0 1 1 0 0 0 0 0 0 1 0 1 0 ... 0 0 0 0 1 0 0 2 1 0 0 1 1 1 0 0 0 0 ... 0 0 1 1 0 0 1 3 1 1 0 0 0 0 0 0 0 0 ... 0 0 0 0 2 1 0 4 1 0 1 0 0 0 1 0 2 0 ... 0 0 0 1 0 0 0 5 0 1 0 1 1 1 1 0 0 1 ... 0 1 0 0 1 0 0 6 0 0 1 0 0 2 1 0 0 0 ... 0 1 0 1 0 1 0 7 1 0 1 1 0 0 0 0 0 0 ... 0 1 0 0 0 1 0 8 0 1 0 1 0 0 0 1 1 0 ... 2 0 0 0 1 0 0 9 0 0 1 1 0 0 0 0 0 0 ... 0 0 0 1 2 2 0 29 30 31 0 0 0 1 1 0 1 0 2 0 0 0 3 0 0 0 4 0 0 1 5 0 0 0 6 0 1 0 7 0 0 0 8 0 0 0 9 0 0 0 [10 rows x 31 columns] -790.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 1 2 0 0 0 1 0 0 ... 0 0 0 0 0 0 0 1 1 0 0 1 0 1 0 0 0 1 ... 0 0 0 0 0 1 0 2 0 1 1 0 0 0 1 0 0 1 ... 0 0 0 0 1 0 1 3 1 0 1 0 0 0 0 0 0 0 ... 0 0 0 0 2 0 0 4 1 0 0 0 0 1 0 0 2 0 ... 1 0 0 0 0 0 1 5 0 0 0 0 0 1 0 1 1 1 ... 1 0 0 1 1 1 0 6 0 1 0 0 0 2 0 0 0 1 ... 0 0 0 0 0 0 0 7 0 0 0 0 0 0 0 0 1 1 ... 0 0 0 0 1 0 1 8 0 0 0 0 0 1 0 1 0 1 ... 2 0 0 1 0 0 0 9 0 0 1 0 0 0 1 0 1 0 ... 0 0 0 1 2 2 0 29 30 31 0 0 1 1 1 0 0 0 2 1 0 0 3 1 0 0 4 0 1 1 5 1 0 0 6 0 0 1 7 0 1 0 8 0 1 0 9 0 0 0 [10 rows x 31 columns] -833.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 1 2 1 0 0 0 1 0 ... 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 ... 0 1 0 0 0 0 1 2 0 0 1 0 0 0 0 1 0 0 ... 0 0 0 0 0 1 0 3 1 0 0 0 1 0 1 0 0 0 ... 0 0 0 0 2 0 0 4 0 1 0 0 0 0 0 1 2 0 ... 0 0 0 0 0 1 1 5 0 0 0 0 0 1 0 1 0 0 ... 1 1 0 1 0 1 0 6 1 0 0 0 0 2 0 1 1 0 ... 0 0 0 0 1 0 1 7 0 0 0 0 1 0 0 0 1 0 ... 0 0 1 0 0 0 0 8 1 0 0 1 0 0 1 0 0 1 ... 2 0 0 0 0 0 0 9 1 1 0 0 0 0 0 0 0 0 ... 1 0 1 0 2 2 0 29 30 31 0 0 0 0 1 1 0 1 2 1 0 0 3 1 0 0 4 0 1 0 5 0 0 0 6 0 1 0 7 0 0 0 8 0 1 0 9 0 1 0 [10 rows x 31 columns] -596.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 1 0 0 0 ... 1 1 0 0 0 1 0 1 0 0 0 0 0 0 1 0 0 1 ... 0 0 1 0 0 1 0 2 0 0 0 0 1 0 0 0 0 1 ... 0 0 0 0 0 1 1 3 0 0 0 0 1 0 0 0 1 0 ... 0 0 1 0 2 1 0 4 0 0 0 1 0 0 1 0 2 0 ... 1 0 1 0 0 0 1 5 1 1 1 1 0 0 1 0 0 0 ... 0 0 0 0 0 1 0 6 0 0 0 1 0 2 0 0 0 0 ... 0 1 0 1 1 0 0 7 1 1 0 1 0 0 0 0 0 0 ... 0 1 0 0 0 0 1 8 1 1 0 0 0 0 1 0 0 1 ... 2 0 0 0 1 1 0 9 0 0 0 0 1 0 0 1 1 0 ... 0 0 0 1 2 2 0 29 30 31 0 0 0 0 1 0 0 1 2 0 0 0 3 0 1 0 4 0 0 1 5 0 0 1 6 1 1 0 7 1 0 0 8 0 0 0 9 0 0 1 [10 rows x 31 columns] -780.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 1 0 2 0 1 1 0 0 0 ... 0 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1 0 ... 0 1 0 0 0 0 0 2 0 0 0 1 0 1 1 0 0 1 ... 0 0 0 1 1 0 1 3 1 1 0 0 0 1 1 0 0 0 ... 0 1 0 0 2 0 1 4 0 1 0 1 1 0 0 0 2 0 ... 1 0 0 0 0 0 1 5 0 1 0 0 1 0 1 0 0 1 ... 1 0 0 1 0 0 0 6 0 0 1 0 1 2 1 0 0 0 ... 0 1 0 0 1 0 0 7 1 1 0 0 0 0 0 1 0 0 ... 1 0 0 0 0 0 0 8 0 0 1 1 0 0 0 1 0 0 ... 2 0 0 0 1 0 0 9 1 0 0 0 0 1 1 0 0 1 ... 1 0 0 0 2 2 0 29 30 31 0 0 0 0 1 0 0 0 2 0 0 0 3 0 0 0 4 1 0 0 5 0 0 0 6 1 1 1 7 0 0 1 8 1 0 0 9 0 0 0 [10 rows x 31 columns] -698.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 1 1 0 0 0 0 ... 0 0 0 1 0 0 1 1 0 0 0 0 0 0 1 0 0 0 ... 1 0 1 0 0 1 0 2 0 0 0 0 0 1 0 0 1 0 ... 1 0 0 0 0 0 1 3 0 0 1 1 0 0 1 1 0 0 ... 1 0 0 0 2 0 0 4 0 0 0 0 0 1 1 0 2 0 ... 1 0 0 0 0 1 0 5 0 1 0 1 1 0 0 1 0 0 ... 0 0 0 0 0 0 0 6 0 1 0 0 1 2 0 0 0 1 ... 0 0 1 1 0 0 0 7 0 1 1 0 0 0 0 0 0 0 ... 1 0 1 1 0 0 0 8 1 0 0 1 0 0 0 0 0 0 ... 2 1 0 0 0 0 1 9 0 1 1 0 0 0 0 0 0 1 ... 0 0 0 0 2 2 0 29 30 31 0 0 0 0 1 1 0 0 2 1 0 1 3 0 0 0 4 0 0 0 5 0 0 0 6 0 1 1 7 0 0 0 8 0 0 0 9 1 0 0 [10 rows x 31 columns] -916.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 1 2 1 0 0 0 1 0 ... 0 0 0 0 0 0 1 1 0 1 1 0 0 0 0 0 0 1 ... 0 0 0 0 0 1 0 2 0 1 0 0 0 0 1 1 1 1 ... 0 0 0 0 1 1 0 3 0 0 0 0 0 1 1 0 0 0 ... 0 0 0 0 2 0 1 4 1 1 0 0 1 0 0 0 2 0 ... 0 1 0 0 0 0 1 5 0 0 1 0 1 0 1 0 0 0 ... 1 0 0 0 1 0 0 6 0 1 0 1 1 2 1 0 0 1 ... 0 0 0 0 0 0 0 7 0 1 1 0 0 0 1 0 0 0 ... 1 0 0 1 0 0 0 8 1 0 1 0 0 0 0 0 1 0 ... 2 0 1 0 0 1 1 9 0 0 0 1 1 0 1 1 0 0 ... 0 0 0 0 2 2 0 29 30 31 0 0 0 0 1 0 0 0 2 0 0 0 3 0 0 1 4 0 0 0 5 1 0 1 6 1 0 0 7 0 0 0 8 1 1 0 9 0 1 1 [10 rows x 31 columns] -682.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 1 2 0 1 0 0 0 1 ... 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 ... 0 0 1 0 0 1 0 2 0 1 0 0 0 0 1 1 0 0 ... 0 0 0 1 1 0 1 3 0 0 0 0 0 1 1 0 0 1 ... 0 0 0 1 2 0 0 4 0 0 0 0 0 0 1 0 2 1 ... 0 0 1 1 0 0 0 5 0 0 0 0 1 0 1 1 0 0 ... 0 0 1 1 0 0 1 6 0 0 0 0 0 2 1 1 1 0 ... 0 0 0 1 0 0 0 7 0 0 1 1 0 0 0 1 0 0 ... 0 0 0 0 0 0 1 8 0 0 0 0 1 0 0 0 0 1 ... 2 1 0 0 0 0 1 9 0 1 0 0 1 0 0 1 0 0 ... 0 1 0 0 2 2 0 29 30 31 0 1 0 0 1 0 0 0 2 0 0 1 3 1 1 0 4 0 0 1 5 0 0 0 6 0 0 0 7 0 0 0 8 0 0 1 9 1 1 1 [10 rows x 31 columns] -782.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 0 0 0 1 ... 1 1 0 0 0 0 0 1 0 1 0 0 0 0 1 0 1 0 ... 0 0 0 1 0 0 0 2 1 0 0 1 0 0 1 0 1 1 ... 0 0 0 1 0 0 0 3 1 0 0 0 0 0 0 0 0 0 ... 0 0 0 0 2 0 0 4 0 0 0 1 0 1 0 1 2 0 ... 1 0 1 0 0 0 0 5 1 0 1 1 0 0 0 0 0 0 ... 0 1 1 1 0 0 0 6 0 0 0 1 0 2 1 0 0 0 ... 1 1 0 0 1 0 0 7 0 0 1 1 0 1 0 0 0 0 ... 0 0 0 0 1 0 0 8 0 0 0 0 0 1 0 1 0 0 ... 2 0 1 0 0 0 1 9 0 0 0 0 1 0 0 0 0 1 ... 1 1 1 1 2 2 0 29 30 31 0 0 1 0 1 0 0 0 2 0 0 0 3 1 0 0 4 0 0 0 5 0 1 0 6 0 0 0 7 0 0 0 8 0 0 0 9 1 0 0 [10 rows x 31 columns] -663.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 1 1 0 0 ... 0 0 0 0 1 0 1 1 1 1 0 1 0 0 0 0 0 0 ... 0 1 0 0 0 0 0 2 1 1 0 0 0 1 0 0 0 0 ... 0 1 0 0 0 0 1 3 0 0 0 0 0 1 0 0 0 1 ... 0 0 0 0 2 0 0 4 0 1 0 0 0 1 1 0 2 0 ... 0 0 1 1 0 0 1 5 1 1 0 0 0 1 0 0 0 0 ... 0 0 0 0 0 0 0 6 0 1 0 0 1 2 0 0 1 0 ... 0 0 0 1 1 1 0 7 0 0 0 0 1 0 0 0 0 0 ... 1 0 0 1 1 0 0 8 0 0 0 0 0 0 0 1 0 1 ... 2 0 1 0 0 0 0 9 0 0 0 0 0 0 0 0 1 0 ... 1 0 0 0 2 2 0 29 30 31 0 0 0 0 1 0 0 0 2 0 0 1 3 0 0 0 4 0 0 0 5 1 0 0 6 0 0 0 7 0 0 0 8 0 0 1 9 0 0 1 [10 rows x 31 columns] -576.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 1 1 0 0 1 ... 0 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 0 0 ... 1 1 0 1 0 0 0 2 1 0 0 0 0 1 0 0 1 0 ... 0 0 0 0 0 0 1 3 0 0 0 0 0 1 0 0 1 1 ... 0 1 0 0 2 0 0 4 0 0 0 1 1 0 0 0 2 0 ... 0 0 0 0 1 1 0 5 0 0 0 0 1 0 1 1 0 1 ... 0 0 0 0 0 1 0 6 0 0 0 0 1 2 0 0 1 0 ... 1 1 0 1 0 0 0 7 0 0 1 0 1 1 0 0 1 0 ... 1 0 0 0 0 1 0 8 0 0 0 0 1 0 0 0 1 0 ... 2 1 0 0 0 0 0 9 1 1 1 0 0 1 0 0 0 0 ... 0 0 1 0 2 2 0 29 30 31 0 1 0 0 1 0 0 0 2 0 0 1 3 0 0 0 4 0 1 0 5 0 1 0 6 1 0 1 7 0 0 0 8 0 0 1 9 0 0 0 [10 rows x 31 columns] -633.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 1 2 0 1 0 0 0 0 ... 0 1 0 1 0 1 0 1 1 1 1 0 0 0 0 0 0 0 ... 0 0 1 0 0 1 0 2 0 1 0 0 1 0 0 0 0 1 ... 1 0 0 0 0 0 1 3 0 0 0 1 0 0 1 0 0 0 ... 0 0 1 0 2 0 0 4 0 0 0 0 1 0 0 1 2 0 ... 0 0 0 1 0 0 0 5 0 1 0 0 0 0 0 1 1 1 ... 0 0 0 1 0 1 1 6 0 0 0 0 0 2 0 0 1 1 ... 0 1 0 0 1 0 0 7 1 1 0 0 0 0 0 0 1 0 ... 0 0 0 0 0 1 0 8 0 1 0 1 0 0 0 0 0 1 ... 2 0 0 0 0 1 0 9 1 0 0 0 0 1 0 0 1 0 ... 1 0 0 0 2 2 0 29 30 31 0 1 0 0 1 0 0 0 2 1 0 0 3 0 0 0 4 0 0 1 5 0 0 0 6 1 0 0 7 0 0 0 8 0 0 0 9 1 0 0 [10 rows x 31 columns] -648.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 1 0 2 1 0 0 0 0 0 ... 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 ... 1 0 0 0 1 0 0 2 1 1 0 1 0 0 1 1 0 1 ... 0 0 0 0 0 0 0 3 0 0 0 0 0 0 1 0 0 0 ... 0 0 0 0 2 0 0 4 0 0 0 0 0 0 0 0 2 0 ... 1 0 1 0 0 0 1 5 1 0 0 0 0 0 1 0 0 1 ... 0 1 1 1 0 0 0 6 0 0 1 0 0 2 1 0 0 0 ... 1 0 1 0 0 0 0 7 0 0 0 0 0 0 0 1 0 0 ... 0 0 1 0 1 0 0 8 0 1 1 1 0 0 0 0 0 0 ... 2 0 0 1 1 1 0 9 0 0 0 1 0 0 0 0 1 0 ... 0 1 0 0 2 2 0 29 30 31 0 1 1 0 1 0 0 0 2 0 0 0 3 0 1 0 4 0 0 0 5 0 0 0 6 1 1 0 7 0 0 0 8 0 0 1 9 0 0 0 [10 rows x 31 columns] -916.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 0 0 1 1 ... 1 0 0 0 1 0 1 1 0 0 0 0 0 0 0 1 0 0 ... 0 0 1 0 1 0 0 2 0 1 1 0 0 0 0 1 0 0 ... 0 0 0 0 0 0 0 3 0 1 0 0 0 0 0 0 0 0 ... 1 0 0 0 2 1 0 4 1 1 0 0 0 1 1 0 2 1 ... 0 0 0 0 0 0 0 5 0 0 1 0 0 0 1 0 1 0 ... 0 0 0 0 0 0 1 6 0 1 0 0 1 2 1 1 0 1 ... 0 0 0 0 0 0 1 7 0 1 0 0 0 0 0 1 0 0 ... 0 1 0 1 1 0 0 8 0 1 0 0 0 0 1 0 0 1 ... 2 0 0 0 0 0 0 9 0 0 0 1 0 1 0 0 0 1 ... 0 1 1 0 2 2 0 29 30 31 0 0 0 0 1 0 0 0 2 1 1 0 3 1 0 0 4 0 0 0 5 0 0 1 6 0 0 1 7 0 0 0 8 0 1 0 9 1 1 0 [10 rows x 31 columns] -789.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 0 0 1 0 ... 0 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 ... 1 0 1 0 0 0 0 2 0 0 0 0 1 0 0 0 1 1 ... 0 0 1 0 0 0 0 3 0 1 0 0 1 0 1 0 1 0 ... 0 0 0 0 2 1 0 4 0 1 0 0 1 0 0 1 2 1 ... 0 0 0 0 0 0 0 5 0 0 0 0 1 0 0 0 0 1 ... 0 0 0 1 0 0 0 6 0 0 0 1 1 2 0 1 0 1 ... 0 0 0 1 0 0 0 7 0 0 1 1 1 0 0 0 0 0 ... 0 0 0 0 0 0 0 8 0 0 0 0 1 0 0 0 0 0 ... 2 0 0 0 0 1 0 9 0 0 0 0 0 1 0 0 1 0 ... 0 0 1 0 2 2 1 29 30 31 0 1 0 0 1 0 1 0 2 0 0 1 3 1 0 0 4 0 0 0 5 0 0 1 6 1 0 0 7 1 0 0 8 1 0 1 9 1 1 1 [10 rows x 31 columns] -1032.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 1 2 1 0 0 0 0 1 ... 0 0 0 0 0 0 0 1 0 1 1 0 0 0 0 0 1 1 ... 0 0 0 0 0 0 0 2 0 0 1 0 1 0 0 0 0 0 ... 0 1 0 0 0 0 1 3 0 0 0 0 0 0 0 0 0 0 ... 0 1 0 1 2 0 1 4 0 0 0 0 0 0 0 1 2 0 ... 0 0 1 0 0 0 1 5 0 1 0 1 0 0 0 0 1 0 ... 1 1 0 0 1 0 0 6 1 0 0 0 1 2 0 1 0 0 ... 1 0 0 0 0 0 0 7 0 0 1 0 0 0 0 0 0 0 ... 0 1 0 0 0 0 0 8 1 0 0 0 0 1 0 0 0 0 ... 2 0 0 0 1 0 0 9 1 0 1 0 1 0 0 0 0 1 ... 1 0 1 0 2 2 0 29 30 31 0 0 0 0 1 0 1 0 2 1 0 0 3 0 0 0 4 1 0 0 5 0 0 0 6 1 0 0 7 0 0 0 8 0 0 0 9 0 0 0 [10 rows x 31 columns] -858.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 1 2 0 0 1 0 0 0 ... 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 1 1 ... 0 0 0 1 1 1 0 2 0 0 0 1 1 0 1 0 0 0 ... 0 0 0 1 1 0 0 3 1 0 0 0 0 1 0 0 0 0 ... 1 0 0 0 2 1 0 4 1 0 0 0 1 0 1 0 2 0 ... 1 0 0 0 0 1 0 5 0 1 0 0 1 1 0 1 0 0 ... 0 0 1 0 1 0 0 6 0 1 0 0 1 2 1 0 0 1 ... 0 0 0 1 0 1 0 7 1 0 0 1 0 1 0 0 0 1 ... 1 0 0 1 0 0 0 8 0 0 0 0 0 0 0 0 0 0 ... 2 1 0 0 1 0 0 9 0 1 1 0 0 0 0 0 0 0 ... 0 0 1 0 2 2 0 29 30 31 0 0 0 1 1 0 0 0 2 1 0 0 3 0 1 0 4 0 0 0 5 0 0 0 6 1 0 0 7 0 0 0 8 0 1 1 9 0 1 1 [10 rows x 31 columns] -899.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 1 0 1 1 0 1 ... 0 0 0 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 ... 0 0 0 0 0 0 0 2 0 0 0 0 0 1 1 1 1 1 ... 0 0 0 0 0 1 0 3 0 0 0 0 0 0 0 0 1 0 ... 0 0 0 1 2 0 1 4 0 0 0 0 0 0 0 1 2 1 ... 1 0 0 0 0 0 0 5 0 1 0 1 0 0 1 0 0 0 ... 1 1 1 1 0 0 0 6 0 1 0 0 0 2 0 0 0 0 ... 0 0 0 1 0 0 0 7 1 1 0 0 0 0 0 0 0 0 ... 0 0 0 0 0 0 1 8 0 0 0 0 0 1 0 0 0 1 ... 2 1 0 0 0 1 0 9 0 0 1 1 0 1 0 0 0 1 ... 0 0 1 0 2 2 0 29 30 31 0 0 0 0 1 0 0 1 2 1 1 0 3 0 0 0 4 0 0 1 5 1 0 0 6 0 1 1 7 0 1 0 8 0 0 0 9 0 1 0 [10 rows x 31 columns] -795.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 1 2 1 0 0 0 0 0 ... 1 0 0 1 1 0 0 1 1 1 0 1 0 0 0 0 0 1 ... 0 0 0 0 0 0 0 2 1 0 0 0 0 0 1 0 1 1 ... 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 1 ... 1 0 0 1 2 0 0 4 0 0 0 0 0 0 0 0 2 1 ... 0 1 0 0 0 0 0 5 0 1 0 0 0 0 1 0 1 1 ... 0 0 1 1 1 0 0 6 0 0 1 1 0 2 0 0 0 0 ... 0 0 1 0 0 1 0 7 0 0 0 1 0 0 0 0 1 0 ... 0 0 0 1 0 0 0 8 0 0 1 0 0 1 0 0 1 1 ... 2 1 0 1 0 0 0 9 0 0 0 0 0 1 1 1 0 0 ... 0 0 0 0 2 2 0 29 30 31 0 0 0 0 1 0 0 0 2 1 0 0 3 0 0 0 4 0 0 1 5 0 0 0 6 0 1 0 7 1 0 0 8 0 0 0 9 0 0 0 [10 rows x 31 columns] -537.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 0 1 0 0 ... 1 0 0 1 1 0 0 1 1 0 0 0 1 0 0 0 1 0 ... 0 0 0 0 1 1 0 2 0 0 0 1 0 0 0 1 0 0 ... 0 0 0 0 1 0 0 3 0 0 1 0 0 1 0 0 0 0 ... 1 0 0 0 2 0 0 4 0 0 1 0 1 0 0 0 2 1 ... 0 0 0 0 1 0 0 5 0 1 1 0 0 0 0 0 1 0 ... 0 0 0 1 0 0 0 6 0 0 1 0 0 2 1 0 0 1 ... 0 1 0 0 0 1 0 7 0 1 1 0 0 1 1 0 0 0 ... 0 0 0 1 1 0 0 8 0 1 0 0 0 0 1 0 0 0 ... 2 1 1 1 0 1 0 9 1 1 0 0 0 0 0 1 0 1 ... 1 0 0 0 2 2 0 29 30 31 0 0 0 0 1 0 0 0 2 1 0 0 3 0 0 0 4 0 1 1 5 0 1 0 6 0 0 1 7 0 0 0 8 0 0 0 9 0 0 1 [10 rows x 31 columns] -627.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 1 0 1 1 1 ... 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 ... 0 0 1 0 0 0 0 2 0 0 0 0 0 0 0 1 1 0 ... 0 0 0 1 1 0 1 3 0 0 0 0 1 0 1 0 0 0 ... 0 0 0 0 2 0 0 4 1 0 1 0 0 0 1 0 2 0 ... 0 0 0 0 0 0 0 5 1 0 0 0 0 1 0 1 0 0 ... 0 0 1 0 0 0 1 6 0 0 0 0 0 2 0 1 1 0 ... 0 1 0 0 0 1 0 7 0 0 0 0 1 0 0 0 0 0 ... 1 0 0 0 0 1 1 8 0 0 0 0 0 0 1 1 0 1 ... 2 0 0 0 1 1 1 9 0 0 0 1 0 0 0 0 1 0 ... 1 0 0 0 2 2 1 29 30 31 0 1 0 0 1 1 0 0 2 1 0 0 3 1 0 0 4 0 0 0 5 1 0 0 6 0 0 0 7 0 0 0 8 0 0 0 9 1 0 0 [10 rows x 31 columns] -776.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 1 0 0 0 ... 0 1 1 0 0 0 0 1 1 0 1 0 0 0 0 0 0 0 ... 0 0 0 0 0 1 0 2 0 0 0 0 0 1 1 0 0 0 ... 1 1 0 0 0 0 1 3 0 0 0 1 0 1 0 0 0 0 ... 1 0 0 1 2 0 0 4 0 0 0 0 0 0 0 1 2 0 ... 0 0 1 1 0 0 0 5 0 0 1 0 0 0 0 0 1 0 ... 0 0 1 1 1 0 0 6 0 0 0 1 1 2 0 0 0 1 ... 0 0 0 0 0 0 1 7 0 0 0 0 1 0 0 0 0 1 ... 0 1 0 0 0 0 0 8 0 0 0 0 0 0 1 1 0 1 ... 2 0 0 1 0 0 1 9 0 0 1 0 1 1 1 0 0 0 ... 0 0 0 0 2 2 0 29 30 31 0 1 0 0 1 0 0 1 2 0 0 1 3 1 1 0 4 1 1 0 5 0 0 0 6 0 0 0 7 0 0 0 8 1 0 0 9 1 0 0 [10 rows x 31 columns] -916.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 1 2 1 0 0 0 0 0 ... 1 1 0 0 0 0 1 1 0 0 1 0 0 0 1 1 1 0 ... 0 0 1 1 0 0 0 2 0 0 0 0 0 1 0 0 0 1 ... 0 1 0 0 1 0 0 3 1 0 0 0 0 0 0 1 1 0 ... 0 0 0 0 2 0 0 4 0 0 1 0 1 0 0 0 2 0 ... 0 0 1 0 0 1 0 5 0 0 0 0 0 1 0 0 1 0 ... 0 0 0 1 1 0 0 6 0 0 1 1 1 2 0 0 0 1 ... 1 0 0 0 0 0 0 7 0 0 1 0 0 1 1 1 1 0 ... 0 0 1 0 1 0 0 8 0 0 1 0 1 0 0 0 1 1 ... 2 0 1 1 0 0 0 9 0 1 1 0 1 0 0 0 0 0 ... 0 0 0 0 2 2 0 29 30 31 0 0 0 1 1 0 0 0 2 0 0 1 3 0 0 0 4 1 0 0 5 0 0 1 6 0 0 0 7 0 0 0 8 0 1 0 9 1 1 0 [10 rows x 31 columns] -964.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 1 0 2 0 0 0 0 0 0 ... 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 ... 0 1 1 0 0 0 1 2 1 0 0 0 0 0 0 0 0 1 ... 1 1 1 0 1 0 0 3 0 0 0 0 0 0 0 0 0 0 ... 0 0 0 1 2 1 0 4 0 1 0 0 0 0 0 0 2 0 ... 0 0 0 0 1 0 1 5 0 0 1 0 1 0 0 1 0 0 ... 0 0 1 0 0 0 0 6 0 1 0 0 0 2 1 1 0 0 ... 1 0 0 0 0 0 1 7 0 0 0 1 0 0 0 0 1 1 ... 0 0 0 0 0 0 0 8 1 0 0 0 1 0 0 0 0 0 ... 2 1 1 1 0 0 0 9 0 1 1 0 0 0 0 0 0 0 ... 1 0 1 0 2 2 0 29 30 31 0 1 0 0 1 0 0 0 2 0 0 0 3 0 0 1 4 0 1 0 5 0 1 1 6 0 0 0 7 1 1 0 8 0 1 0 9 0 0 0 [10 rows x 31 columns] -748.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 1 0 0 1 ... 0 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 0 0 ... 1 1 0 0 0 0 0 2 1 0 0 0 0 0 0 0 0 1 ... 1 0 0 0 0 0 0 3 1 0 0 1 0 0 0 0 0 0 ... 0 0 0 0 2 1 0 4 1 0 1 0 0 1 0 1 2 0 ... 0 1 0 0 1 0 0 5 0 0 0 1 1 0 0 0 0 1 ... 1 0 1 0 1 0 0 6 1 0 1 1 0 2 0 0 0 0 ... 0 1 0 0 1 0 0 7 1 0 1 1 0 0 0 0 0 0 ... 0 0 0 0 0 1 0 8 0 0 0 0 0 0 1 0 0 1 ... 2 1 0 1 0 0 0 9 0 0 0 0 0 0 0 0 1 1 ... 0 0 0 1 2 2 1 29 30 31 0 0 1 0 1 0 1 0 2 0 0 0 3 0 0 0 4 0 0 0 5 0 0 0 6 0 0 1 7 0 0 0 8 1 0 0 9 0 1 0 [10 rows x 31 columns] -812.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 1 0 0 0 0 ... 1 1 0 0 0 0 0 1 1 0 1 0 0 0 0 0 0 1 ... 0 0 0 0 1 0 0 2 0 0 0 0 1 1 0 1 0 1 ... 0 0 0 1 0 0 0 3 0 1 0 1 0 0 1 0 0 0 ... 1 0 0 0 2 1 0 4 0 0 0 0 0 0 1 1 2 1 ... 1 0 0 0 0 1 0 5 0 0 0 0 0 0 0 0 0 0 ... 1 0 0 1 0 0 1 6 1 1 0 0 0 2 0 0 0 0 ... 1 0 1 0 0 1 0 7 1 1 0 0 0 0 0 1 0 1 ... 0 0 0 0 0 1 0 8 0 1 0 0 1 0 1 0 1 1 ... 2 0 0 1 0 1 1 9 0 0 1 0 1 0 0 0 0 1 ... 0 0 0 1 2 2 0 29 30 31 0 1 0 0 1 0 0 0 2 0 0 0 3 0 1 0 4 0 0 0 5 1 1 0 6 0 0 1 7 0 1 0 8 0 0 0 9 0 0 0 [10 rows x 31 columns] -738.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 1 0 2 1 0 0 0 0 0 ... 0 0 1 0 0 1 1 1 0 0 0 0 1 0 0 1 0 0 ... 0 0 0 1 0 0 0 2 0 0 1 0 0 0 0 0 0 0 ... 1 0 0 1 0 0 1 3 0 0 1 0 0 0 0 1 0 1 ... 0 0 0 0 2 0 0 4 0 1 0 0 0 1 0 0 2 0 ... 0 0 0 1 0 0 0 5 0 0 0 1 0 0 0 1 0 1 ... 0 1 0 0 0 1 0 6 0 1 1 1 0 2 1 0 0 1 ... 0 1 1 0 1 0 1 7 0 0 0 0 0 0 0 1 0 0 ... 0 0 0 0 1 1 0 8 0 1 0 0 0 1 0 0 0 0 ... 2 1 0 0 0 0 0 9 0 1 0 0 0 0 0 0 0 0 ... 0 1 0 1 2 2 1 29 30 31 0 0 0 0 1 1 1 0 2 0 0 0 3 0 1 0 4 0 0 1 5 0 0 0 6 0 0 0 7 0 0 0 8 1 0 1 9 0 0 1 [10 rows x 31 columns] -878.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 1 0 2 1 0 1 0 0 0 ... 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 ... 1 1 0 0 0 0 1 2 1 0 0 0 0 0 0 1 0 0 ... 1 0 0 0 0 1 0 3 0 0 0 0 0 0 0 0 0 1 ... 1 0 0 0 2 0 1 4 0 0 0 0 1 1 0 1 2 0 ... 0 1 1 1 0 0 1 5 1 0 0 0 1 0 0 0 0 0 ... 0 0 0 0 0 0 1 6 1 0 0 0 0 2 0 1 1 0 ... 1 1 0 0 0 1 0 7 1 0 0 0 0 0 0 0 1 1 ... 0 0 0 1 0 0 0 8 0 0 1 0 0 0 0 0 0 0 ... 2 0 0 1 0 0 0 9 0 1 0 0 1 0 1 1 1 0 ... 0 0 0 0 2 2 0 29 30 31 0 1 0 0 1 0 1 0 2 0 0 0 3 0 0 1 4 0 0 0 5 0 1 1 6 0 0 1 7 0 0 0 8 0 0 0 9 0 0 0 [10 rows x 31 columns] -606.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 1 2 0 1 0 1 1 0 ... 1 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0 ... 1 1 0 0 0 0 0 2 0 1 0 0 0 0 0 0 1 0 ... 0 0 0 0 0 0 0 3 0 0 0 1 0 1 1 0 0 0 ... 0 1 0 0 2 0 0 4 0 0 0 0 0 1 1 1 2 0 ... 0 1 0 0 0 0 0 5 0 0 1 0 1 0 0 0 1 0 ... 1 0 0 0 1 0 0 6 0 0 0 1 0 2 1 1 0 0 ... 0 0 0 1 0 0 1 7 1 0 0 0 0 1 0 1 1 1 ... 0 0 0 0 0 0 0 8 0 0 1 0 1 0 0 0 0 0 ... 2 0 1 1 0 0 0 9 1 0 0 0 1 0 0 0 1 0 ... 0 0 0 1 2 2 0 29 30 31 0 0 0 0 1 0 1 0 2 1 1 0 3 0 1 0 4 1 0 0 5 0 0 1 6 0 0 1 7 0 0 0 8 0 1 0 9 0 0 0 [10 rows x 31 columns] -617.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 1 0 1 0 0 ... 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 0 1 1 ... 0 0 0 0 1 0 0 2 0 0 0 1 1 0 0 0 0 1 ... 0 1 0 0 0 0 1 3 0 0 0 0 0 0 1 0 1 0 ... 0 0 0 0 2 0 0 4 0 0 0 1 1 0 1 0 2 0 ... 1 0 0 1 0 0 0 5 0 0 0 0 1 1 0 1 0 0 ... 0 0 1 0 0 0 0 6 0 0 0 1 0 2 1 0 1 0 ... 0 1 0 0 0 0 1 7 0 0 0 0 0 0 0 1 0 0 ... 1 1 1 0 0 1 1 8 0 1 1 0 1 0 1 0 0 1 ... 2 0 0 0 0 0 0 9 0 0 0 0 0 0 1 0 0 0 ... 0 0 0 0 2 2 0 29 30 31 0 1 0 0 1 0 0 0 2 0 1 0 3 1 1 0 4 0 0 1 5 1 1 1 6 0 0 0 7 0 0 0 8 0 1 0 9 0 0 0 [10 rows x 31 columns] -676.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 1 1 2 0 0 1 0 1 0 ... 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 ... 0 1 0 0 0 0 0 2 0 0 1 0 0 1 0 1 0 0 ... 1 0 0 0 1 1 0 3 0 0 0 0 1 0 0 1 0 1 ... 0 0 1 0 2 1 0 4 0 0 0 0 0 0 0 0 2 0 ... 0 0 1 1 1 0 1 5 0 0 0 1 0 1 0 0 0 0 ... 0 1 0 0 0 0 0 6 1 0 1 0 0 2 0 1 0 0 ... 0 0 0 1 0 0 0 7 0 0 0 0 1 0 0 0 0 0 ... 1 0 1 1 0 0 1 8 1 0 0 0 0 0 1 0 1 0 ... 2 0 0 1 0 0 0 9 0 0 1 0 1 0 0 0 0 0 ... 0 0 0 0 2 2 0 29 30 31 0 0 0 1 1 1 0 1 2 1 0 0 3 0 0 0 4 0 1 0 5 1 0 1 6 1 0 0 7 0 0 0 8 1 1 0 9 0 1 0 [10 rows x 31 columns] -824.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 1 0 2 1 0 0 0 0 0 ... 0 0 0 1 1 0 1 1 0 0 0 0 0 1 0 1 1 0 ... 1 0 1 0 0 0 0 2 0 0 0 0 1 0 0 1 0 1 ... 1 0 0 0 1 0 1 3 0 0 0 0 0 0 1 0 1 0 ... 0 1 0 0 2 1 1 4 1 1 1 0 0 0 0 0 2 1 ... 0 0 0 0 0 0 0 5 1 0 1 0 0 0 1 0 0 0 ... 1 0 0 0 0 0 0 6 1 0 0 1 0 2 1 0 0 0 ... 1 0 1 0 0 0 0 7 1 0 0 1 0 0 0 0 0 0 ... 1 0 0 0 1 0 0 8 0 1 0 0 0 0 0 0 0 1 ... 2 0 0 0 0 0 1 9 0 1 1 0 0 1 1 0 0 0 ... 0 0 0 0 2 2 0 29 30 31 0 0 0 1 1 0 0 1 2 1 0 0 3 0 0 1 4 1 0 0 5 1 0 0 6 0 1 0 7 0 0 0 8 0 0 1 9 0 1 1 [10 rows x 31 columns] -710.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 1 0 1 1 1 ... 0 0 1 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 ... 0 0 0 1 0 0 0 2 0 0 0 1 0 0 0 0 1 0 ... 0 0 1 1 1 0 1 3 1 1 0 0 0 0 0 0 1 0 ... 0 1 0 1 2 0 0 4 0 1 0 0 0 1 0 0 2 1 ... 0 1 0 1 0 0 0 5 0 0 0 0 0 1 0 1 0 0 ... 0 0 0 1 1 0 0 6 0 1 0 0 0 2 1 1 0 1 ... 0 1 1 0 0 0 0 7 1 0 0 0 1 1 0 0 0 0 ... 0 0 0 0 1 0 1 8 1 1 1 0 1 0 0 0 0 0 ... 2 0 0 0 1 1 0 9 1 1 0 1 0 0 1 0 0 1 ... 0 0 0 1 2 2 0 29 30 31 0 0 0 0 1 1 0 0 2 0 1 0 3 0 1 0 4 0 0 0 5 0 1 0 6 1 0 0 7 0 0 0 8 0 0 0 9 0 0 0 [10 rows x 31 columns] -648.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 0 0 0 0 ... 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 ... 0 0 0 1 0 0 0 2 0 0 0 0 0 0 1 0 0 0 ... 0 0 0 1 0 1 1 3 0 0 1 1 0 0 0 0 0 0 ... 1 0 0 0 2 0 0 4 0 0 0 0 0 0 0 0 2 1 ... 0 1 0 0 0 0 0 5 1 0 1 1 0 1 0 0 0 0 ... 0 0 0 1 0 1 0 6 0 0 1 0 0 2 0 1 0 0 ... 1 0 1 0 1 0 1 7 0 1 1 0 0 1 0 0 0 0 ... 0 0 0 0 0 0 0 8 0 0 0 0 1 0 1 0 0 1 ... 2 1 1 0 0 0 0 9 0 1 0 0 1 0 0 0 0 0 ... 1 0 0 0 2 2 0 29 30 31 0 0 0 0 1 0 0 0 2 0 0 0 3 0 1 0 4 1 0 1 5 1 0 0 6 1 0 0 7 0 1 0 8 0 0 0 9 0 0 1 [10 rows x 31 columns] -765.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 1 1 0 1 1 ... 1 0 0 0 0 0 0 1 1 0 0 0 0 1 0 0 1 0 ... 0 0 0 0 1 0 0 2 0 0 1 0 0 0 0 1 0 0 ... 1 0 0 0 0 1 1 3 0 0 1 0 0 1 0 1 0 0 ... 0 0 0 0 2 0 0 4 0 1 1 1 1 0 0 0 2 0 ... 0 0 0 1 0 0 0 5 1 0 1 1 0 1 0 1 0 0 ... 1 0 1 0 0 0 0 6 1 0 1 0 0 2 0 0 1 0 ... 0 0 0 0 0 1 0 7 1 0 0 0 0 0 0 0 0 1 ... 0 0 1 0 0 0 1 8 0 1 0 0 0 0 0 1 0 1 ... 2 0 0 1 0 0 0 9 0 0 1 0 0 0 0 1 0 0 ... 0 0 0 1 2 2 1 29 30 31 0 0 0 0 1 0 0 0 2 0 0 0 3 0 0 0 4 0 1 1 5 1 0 0 6 0 1 1 7 0 1 0 8 1 0 1 9 1 0 1 [10 rows x 31 columns] -728.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 1 0 1 0 ... 0 0 0 1 1 1 0 1 0 0 1 1 1 0 0 0 1 0 ... 0 1 0 1 0 0 0 2 0 0 0 0 1 0 0 1 0 0 ... 1 0 0 0 0 1 0 3 0 1 0 0 0 1 0 0 0 1 ... 0 1 0 0 2 0 0 4 1 1 1 1 0 0 0 0 2 1 ... 0 0 1 0 0 0 1 5 0 0 0 0 0 1 0 0 1 0 ... 0 1 1 0 1 0 0 6 0 0 1 1 0 2 1 1 0 0 ... 0 0 0 0 0 0 0 7 1 0 0 0 0 0 0 1 1 0 ... 0 1 0 1 0 0 0 8 0 0 1 0 0 0 0 0 0 0 ... 2 0 0 0 1 0 0 9 0 0 0 1 0 0 0 1 0 1 ... 0 0 1 0 2 2 1 29 30 31 0 0 0 0 1 0 0 0 2 0 0 0 3 0 0 0 4 0 0 0 5 0 0 0 6 1 1 0 7 0 0 0 8 0 0 1 9 0 1 0 [10 rows x 31 columns] -615.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 1 2 0 0 0 1 1 0 ... 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 0 ... 0 0 1 0 0 0 0 2 0 1 0 0 1 1 1 0 1 0 ... 1 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 1 0 ... 0 0 0 0 2 0 1 4 0 0 0 1 0 0 0 1 2 0 ... 0 0 1 0 0 1 0 5 0 1 0 0 1 1 1 0 1 1 ... 0 0 1 0 0 0 0 6 1 0 0 0 0 2 0 0 0 1 ... 0 0 0 0 0 1 0 7 0 0 0 1 0 0 0 0 0 0 ... 1 1 0 0 0 0 1 8 1 0 0 0 0 0 1 0 1 0 ... 2 0 0 0 1 0 1 9 0 0 0 0 0 0 0 0 1 0 ... 0 1 1 0 2 2 1 29 30 31 0 0 1 0 1 1 0 0 2 1 0 0 3 1 0 0 4 0 1 0 5 0 0 0 6 0 1 0 7 0 1 1 8 0 1 1 9 0 0 0 [10 rows x 31 columns] -671.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 0 1 0 1 ... 1 0 0 0 1 1 0 1 0 1 0 0 0 0 0 1 0 0 ... 0 1 0 0 0 0 0 2 0 1 0 0 1 0 0 0 0 0 ... 0 1 0 0 0 0 1 3 1 1 0 0 0 0 1 0 0 1 ... 0 0 0 0 2 0 0 4 1 1 0 1 0 1 1 0 2 1 ... 0 0 0 0 0 0 0 5 1 0 1 0 0 0 0 0 1 1 ... 0 0 0 0 1 0 0 6 0 1 0 0 0 2 1 0 1 0 ... 0 1 1 0 0 0 1 7 1 0 0 0 0 0 0 0 0 0 ... 0 0 0 0 0 1 0 8 0 1 0 0 0 0 0 0 1 1 ... 2 0 0 1 0 0 1 9 0 0 0 1 0 0 1 0 1 0 ... 1 0 0 1 2 2 0 29 30 31 0 0 0 1 1 0 0 1 2 0 0 0 3 0 0 0 4 0 0 1 5 1 0 0 6 0 0 1 7 0 0 1 8 0 0 0 9 0 0 0 [10 rows x 31 columns] -763.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 1 2 0 0 0 0 0 1 ... 0 1 1 0 1 0 0 1 0 0 0 0 1 0 0 0 0 0 ... 0 1 1 0 1 1 0 2 1 1 0 0 0 1 0 0 0 1 ... 0 1 0 0 1 0 1 3 0 0 0 0 1 0 0 0 0 0 ... 0 0 0 0 2 1 0 4 1 0 0 0 0 0 0 0 2 0 ... 0 0 0 0 0 0 1 5 0 0 0 0 0 0 0 0 0 0 ... 1 0 0 1 0 1 0 6 0 1 0 0 0 2 1 0 0 0 ... 0 1 0 0 0 0 0 7 0 0 0 0 0 0 0 1 1 0 ... 0 0 0 0 1 0 1 8 1 0 0 0 1 0 1 1 0 1 ... 2 0 0 1 0 0 0 9 1 0 0 0 1 1 0 0 0 0 ... 0 0 0 1 2 2 1 29 30 31 0 1 0 0 1 0 0 0 2 0 0 0 3 1 0 0 4 0 1 0 5 1 0 0 6 0 1 1 7 0 0 1 8 0 0 0 9 0 0 0 [10 rows x 31 columns] -676.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 1 0 0 0 1 0 ... 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 0 0 ... 1 0 0 0 0 0 0 2 1 0 0 1 0 1 0 0 0 0 ... 0 1 1 1 0 0 1 3 0 0 0 0 0 0 0 0 1 0 ... 0 1 0 0 2 0 0 4 1 0 0 0 0 0 0 0 2 0 ... 0 1 0 1 1 1 0 5 0 0 0 0 0 0 1 0 1 0 ... 0 0 0 0 0 1 0 6 0 0 0 0 0 2 0 1 0 1 ... 0 0 0 0 1 1 1 7 0 0 0 0 0 0 0 0 0 0 ... 0 0 0 1 0 0 1 8 0 0 0 0 0 1 1 0 0 0 ... 2 1 0 0 0 1 0 9 0 1 0 0 0 0 0 0 0 0 ... 0 0 1 0 2 2 1 29 30 31 0 1 1 0 1 0 1 0 2 0 0 0 3 0 0 1 4 0 0 0 5 0 1 0 6 1 0 0 7 0 0 1 8 0 0 1 9 0 0 1 [10 rows x 31 columns] -680.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 1 0 0 0 0 ... 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 0 1 0 ... 0 0 0 1 0 0 0 2 0 0 0 0 0 0 1 0 0 0 ... 0 1 1 1 0 0 1 3 0 0 0 1 0 1 0 0 0 0 ... 0 0 1 0 2 0 1 4 1 0 0 0 0 0 0 0 2 0 ... 0 0 0 1 1 0 1 5 0 0 0 0 1 0 1 1 1 0 ... 1 0 0 0 0 0 1 6 0 1 0 1 1 2 0 0 1 0 ... 0 0 0 1 0 0 1 7 0 0 0 0 0 0 0 0 0 0 ... 1 1 1 0 1 0 1 8 0 0 0 0 0 0 0 0 1 0 ... 2 0 0 1 1 0 0 9 0 1 0 0 0 0 0 0 1 0 ... 1 0 0 0 2 2 0 29 30 31 0 0 0 1 1 0 0 0 2 1 0 0 3 0 0 0 4 0 0 1 5 0 1 0 6 0 0 0 7 0 0 0 8 1 0 1 9 0 1 1 [10 rows x 31 columns] -753.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 1 0 0 0 ... 1 1 0 0 0 0 0 1 0 1 1 0 0 0 0 0 0 0 ... 1 0 0 1 0 0 0 2 1 1 0 0 0 0 1 0 0 0 ... 1 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 1 ... 0 1 0 0 2 1 0 4 0 0 0 0 0 0 0 0 2 0 ... 1 0 0 0 1 0 0 5 0 0 0 0 0 0 0 0 0 1 ... 0 0 0 0 0 1 1 6 0 1 1 0 1 2 0 0 0 1 ... 0 0 0 0 0 1 0 7 0 0 0 0 0 0 0 0 1 0 ... 0 1 1 0 0 1 0 8 1 0 0 0 1 0 0 0 1 0 ... 2 0 0 0 0 0 0 9 0 0 1 0 0 0 0 0 0 0 ... 0 0 0 1 2 2 1 29 30 31 0 1 1 1 1 1 0 0 2 0 1 0 3 0 1 1 4 1 1 1 5 1 0 1 6 1 0 0 7 0 0 1 8 0 1 1 9 0 1 0 [10 rows x 31 columns] -764.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 0 0 0 0 ... 1 0 0 0 0 1 1 1 0 0 0 0 0 0 0 1 1 0 ... 0 0 0 0 0 0 0 2 0 0 0 1 1 1 0 0 0 0 ... 0 0 0 0 0 1 1 3 0 0 0 0 1 0 1 0 0 0 ... 0 1 0 0 2 1 0 4 1 0 0 0 1 0 0 0 2 0 ... 0 0 0 0 0 0 0 5 0 1 1 0 0 0 0 1 0 0 ... 0 0 0 1 1 0 0 6 0 1 0 0 0 2 1 0 1 0 ... 0 1 0 0 0 0 1 7 0 0 0 0 0 0 1 0 1 1 ... 0 1 1 0 0 0 0 8 1 0 1 0 1 1 0 1 0 0 ... 2 0 0 1 0 0 0 9 0 0 0 0 0 0 0 1 0 0 ... 0 0 0 0 2 2 0 29 30 31 0 0 1 0 1 0 0 0 2 0 0 1 3 0 0 0 4 1 1 1 5 0 1 0 6 0 1 0 7 0 1 0 8 1 1 0 9 0 0 0 [10 rows x 31 columns] -796.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 1 0 0 1 ... 0 0 0 0 0 0 0 1 0 1 1 0 0 0 0 0 0 0 ... 0 0 1 0 0 0 0 2 0 0 0 0 0 0 1 1 1 0 ... 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 1 1 0 ... 1 1 0 0 2 0 1 4 1 0 0 0 0 0 1 1 2 1 ... 1 0 1 0 0 0 0 5 0 0 0 1 0 0 0 1 1 1 ... 1 0 0 0 0 1 0 6 0 1 0 0 0 2 0 1 1 0 ... 0 0 0 1 1 0 0 7 0 0 1 1 0 0 0 0 1 0 ... 1 0 0 0 0 0 0 8 0 0 0 1 1 1 1 0 0 0 ... 2 0 0 0 0 1 0 9 1 0 0 1 1 1 0 0 0 0 ... 0 0 0 0 2 2 0 29 30 31 0 0 0 0 1 0 1 0 2 0 1 1 3 0 0 0 4 0 1 0 5 0 0 0 6 0 0 0 7 0 0 0 8 0 0 0 9 1 0 0 [10 rows x 31 columns] -805.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 1 0 2 0 0 1 0 0 0 ... 0 1 1 0 0 1 0 1 1 0 0 0 0 0 0 0 0 0 ... 0 0 1 0 0 0 0 2 0 1 0 1 0 0 0 0 0 0 ... 0 0 1 0 0 0 0 3 1 0 0 1 0 0 0 0 0 1 ... 1 0 0 0 2 0 0 4 0 0 0 0 0 1 1 0 2 1 ... 0 1 1 0 0 0 0 5 0 1 0 0 0 0 0 0 0 0 ... 0 1 1 0 0 0 0 6 0 0 0 1 0 2 0 1 0 0 ... 0 1 0 1 0 0 1 7 1 0 0 1 0 1 0 0 0 0 ... 0 0 0 0 0 0 1 8 0 0 0 0 1 0 0 0 1 0 ... 2 0 0 0 0 0 1 9 0 1 1 0 0 0 0 0 0 0 ... 1 0 0 0 2 2 0 29 30 31 0 0 0 0 1 0 0 0 2 0 0 0 3 0 0 0 4 0 0 1 5 0 0 0 6 0 0 0 7 0 0 1 8 0 0 1 9 0 0 1 [10 rows x 31 columns] -810.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 0 0 1 0 ... 1 1 0 0 0 0 0 1 0 0 1 0 1 1 0 0 0 0 ... 0 0 0 0 0 0 0 2 0 0 1 1 1 0 0 0 0 1 ... 0 0 0 0 1 0 0 3 1 0 1 0 0 0 0 0 0 1 ... 0 0 0 0 2 0 0 4 0 0 0 0 1 0 1 0 2 1 ... 1 0 0 0 0 0 0 5 0 0 1 1 0 1 0 0 0 0 ... 0 0 0 1 0 0 1 6 0 0 0 0 0 2 0 0 0 0 ... 1 0 1 0 0 1 1 7 1 0 1 0 0 0 0 0 0 0 ... 0 0 1 1 0 1 0 8 1 0 1 1 0 1 0 0 0 0 ... 2 0 0 0 0 0 0 9 0 0 1 0 0 1 0 0 1 0 ... 0 0 0 1 2 2 0 29 30 31 0 1 0 1 1 1 0 0 2 1 1 0 3 1 0 0 4 0 1 1 5 0 0 1 6 0 1 1 7 0 0 1 8 0 0 0 9 0 1 0 [10 rows x 31 columns] -840.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 0 0 0 0 ... 1 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 ... 1 0 0 0 1 0 0 2 1 0 0 0 0 0 1 0 0 0 ... 1 1 0 0 0 0 1 3 0 0 1 1 0 0 0 0 0 0 ... 0 0 1 0 2 0 0 4 0 0 0 0 1 0 0 0 2 0 ... 1 1 0 0 0 0 0 5 0 1 1 0 1 0 1 1 0 0 ... 0 0 0 0 0 0 1 6 0 0 0 1 0 2 1 0 1 1 ... 0 1 0 0 1 0 0 7 1 0 1 0 0 0 0 1 0 0 ... 0 0 0 0 1 0 0 8 0 0 0 0 0 0 0 0 0 0 ... 2 0 0 1 1 0 0 9 0 0 1 1 0 0 0 1 0 0 ... 0 0 0 1 2 2 0 29 30 31 0 1 0 0 1 0 0 0 2 0 0 0 3 0 1 0 4 1 0 1 5 0 1 1 6 1 0 0 7 1 0 0 8 0 1 0 9 0 0 0 [10 rows x 31 columns] -732.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 1 2 0 0 0 1 0 0 ... 0 0 0 0 0 0 0 1 0 1 0 0 1 1 0 0 0 0 ... 0 0 0 0 0 0 0 2 0 0 0 1 0 0 0 0 0 0 ... 1 0 0 0 0 0 0 3 0 0 1 0 0 1 0 1 0 0 ... 1 0 0 0 2 0 1 4 1 0 0 0 0 0 0 0 2 0 ... 0 1 0 1 0 0 1 5 0 0 0 0 0 1 0 1 0 0 ... 1 0 0 0 0 1 1 6 0 0 0 0 0 2 0 0 0 1 ... 1 1 1 0 1 0 0 7 1 1 0 0 0 0 0 0 0 1 ... 1 0 1 0 0 0 0 8 0 1 0 0 0 0 0 0 0 0 ... 2 1 1 0 0 0 1 9 0 0 0 1 0 0 0 0 1 0 ... 0 0 1 1 2 2 0 29 30 31 0 0 1 0 1 0 0 1 2 0 1 0 3 0 0 0 4 0 0 0 5 0 0 1 6 0 0 0 7 0 0 1 8 1 0 0 9 1 0 0 [10 rows x 31 columns] -761.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 1 0 2 1 1 0 0 0 0 ... 0 0 0 0 1 0 0 1 1 0 0 1 0 0 0 0 0 1 ... 0 0 0 1 0 0 0 2 0 0 0 1 0 1 0 0 1 0 ... 0 1 0 0 0 1 0 3 0 1 1 0 1 0 0 1 0 0 ... 0 0 0 0 2 0 0 4 0 0 1 1 1 0 0 0 2 0 ... 0 0 0 1 0 0 1 5 0 0 0 1 0 0 0 0 0 0 ... 0 1 0 0 0 0 0 6 0 1 1 0 0 2 1 0 0 0 ... 0 0 0 0 1 1 1 7 0 1 1 1 1 1 1 0 0 0 ... 0 1 0 0 0 0 0 8 1 0 0 0 0 0 0 0 0 0 ... 2 0 0 1 0 1 0 9 0 1 0 0 0 1 1 0 0 1 ... 0 0 0 0 2 2 0 29 30 31 0 0 1 0 1 1 0 0 2 1 1 0 3 0 0 0 4 0 0 0 5 1 0 0 6 0 0 1 7 0 0 0 8 1 0 0 9 0 0 0 [10 rows x 31 columns] -782.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 1 2 1 0 0 1 0 0 ... 1 0 0 0 1 0 0 1 0 0 0 0 0 1 1 0 1 0 ... 0 0 0 0 0 0 0 2 0 0 0 0 0 1 1 1 0 1 ... 0 0 0 0 1 0 1 3 0 0 0 0 0 0 0 0 1 0 ... 0 0 0 0 2 0 1 4 0 0 0 1 0 1 1 0 2 1 ... 0 0 0 1 0 0 1 5 0 1 0 0 0 0 0 0 1 0 ... 0 1 0 0 0 0 0 6 0 0 1 1 0 2 0 0 0 0 ... 0 0 0 0 0 1 1 7 1 0 0 0 0 1 0 0 0 1 ... 0 0 1 0 0 0 1 8 0 0 0 0 1 0 1 1 0 0 ... 2 1 0 0 0 0 0 9 0 1 1 0 1 0 0 0 0 1 ... 0 0 0 0 2 2 0 29 30 31 0 0 0 0 1 1 1 0 2 0 0 0 3 0 0 0 4 0 1 0 5 0 0 1 6 0 0 1 7 0 0 0 8 0 0 1 9 1 0 1 [10 rows x 31 columns] -797.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 0 1 0 0 ... 0 0 0 0 1 0 1 1 1 0 1 0 0 0 0 0 0 0 ... 0 0 0 0 0 1 0 2 1 1 0 0 0 0 0 1 0 0 ... 0 0 0 0 1 1 0 3 0 0 0 1 0 0 0 0 0 0 ... 0 0 1 0 2 0 0 4 1 0 1 1 1 0 1 0 2 0 ... 0 0 0 0 0 1 0 5 0 0 0 1 0 0 0 0 0 0 ... 0 1 0 1 0 1 1 6 0 1 0 0 0 2 0 0 0 0 ... 1 1 1 1 0 1 0 7 1 0 0 0 0 0 0 0 0 1 ... 0 0 1 0 1 1 0 8 0 0 0 0 0 1 0 0 1 0 ... 2 0 1 0 0 0 0 9 0 0 1 1 0 1 0 0 0 0 ... 0 0 0 0 2 2 1 29 30 31 0 0 0 1 1 0 0 0 2 0 0 0 3 0 0 0 4 0 0 0 5 1 0 0 6 0 0 0 7 0 1 0 8 0 1 0 9 0 1 0 [10 rows x 31 columns] -711.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 1 0 2 0 1 0 0 0 0 ... 0 1 0 0 1 1 0 1 0 1 0 0 0 1 0 1 1 0 ... 1 1 0 0 0 0 0 2 0 0 0 1 0 0 1 0 0 1 ... 0 0 0 0 1 0 0 3 1 0 0 1 0 0 0 0 1 0 ... 1 0 1 0 2 0 0 4 0 0 0 0 0 1 1 1 2 0 ... 0 0 1 0 0 0 1 5 0 1 1 0 0 0 0 1 0 0 ... 0 0 1 0 0 0 1 6 0 0 0 0 1 2 0 1 0 0 ... 0 0 0 1 1 0 0 7 0 0 1 0 0 0 0 0 0 1 ... 0 0 0 0 0 1 0 8 1 0 0 0 0 0 0 0 0 0 ... 2 1 1 0 0 0 0 9 1 1 0 0 1 0 0 1 0 0 ... 0 0 0 0 2 2 1 29 30 31 0 1 0 0 1 0 0 0 2 0 1 0 3 0 0 0 4 0 0 0 5 0 1 0 6 0 0 0 7 0 0 0 8 0 1 1 9 0 1 0 [10 rows x 31 columns] -762.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 1 0 1 1 ... 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 1 0 ... 0 0 1 0 0 0 0 2 0 1 0 0 1 0 0 0 0 0 ... 0 0 0 1 1 0 0 3 0 1 0 0 1 0 0 0 0 1 ... 0 1 0 0 2 0 0 4 1 0 0 0 1 0 0 1 2 0 ... 0 0 1 0 0 0 0 5 0 1 1 0 1 0 0 0 0 1 ... 0 1 0 0 0 0 0 6 0 1 0 0 0 2 0 0 1 0 ... 0 1 0 0 1 0 1 7 1 0 1 0 0 1 0 0 0 0 ... 0 0 0 0 0 0 0 8 0 0 1 0 0 0 1 0 1 0 ... 2 0 0 0 0 0 0 9 1 0 1 1 0 0 0 0 0 0 ... 1 0 0 1 2 2 0 29 30 31 0 0 1 1 1 1 0 0 2 0 0 0 3 0 0 0 4 0 1 0 5 1 0 1 6 0 1 0 7 1 1 0 8 0 0 1 9 0 1 0 [10 rows x 31 columns] -605.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 0 0 0 0 ... 0 0 0 1 0 0 1 1 1 0 1 0 0 0 0 0 0 0 ... 0 0 0 0 1 0 0 2 0 0 0 1 0 1 1 0 0 1 ... 1 0 0 1 0 0 1 3 0 0 0 1 0 0 0 1 1 0 ... 1 0 0 0 2 0 0 4 0 0 1 0 1 0 1 0 2 0 ... 1 0 0 1 0 0 0 5 0 0 0 0 1 0 1 0 0 1 ... 0 0 1 0 1 0 0 6 1 1 0 1 0 2 0 1 0 0 ... 1 0 0 0 0 0 1 7 1 0 0 0 0 1 0 0 0 0 ... 0 1 0 1 0 0 0 8 0 1 0 0 1 1 0 0 0 0 ... 2 0 0 0 1 0 0 9 0 0 0 0 0 0 1 0 0 0 ... 0 0 0 0 2 2 0 29 30 31 0 0 1 0 1 0 0 0 2 0 0 0 3 0 0 0 4 1 0 0 5 1 0 0 6 0 1 0 7 1 0 0 8 0 1 0 9 0 0 0 [10 rows x 31 columns] -583.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 1 0 2 0 0 0 1 0 0 ... 1 0 1 1 0 1 0 1 0 0 1 0 0 0 0 1 0 0 ... 0 0 0 0 0 1 0 2 0 0 1 0 0 1 1 0 0 0 ... 1 0 0 1 0 1 0 3 0 0 1 0 0 1 0 0 1 1 ... 0 0 0 0 2 0 0 4 1 0 0 0 1 0 0 0 2 0 ... 0 0 0 0 1 0 0 5 1 0 0 0 0 0 1 0 0 1 ... 0 0 0 1 0 0 0 6 0 1 0 0 1 2 0 0 0 0 ... 0 0 0 0 1 1 0 7 0 0 1 0 0 0 1 0 0 0 ... 0 1 1 1 0 0 0 8 0 1 0 1 0 1 0 0 0 1 ... 2 0 1 0 0 0 0 9 1 0 0 0 0 0 0 0 0 1 ... 1 0 0 0 2 2 1 29 30 31 0 0 0 0 1 0 0 0 2 0 0 1 3 0 0 0 4 1 0 1 5 0 1 1 6 0 0 0 7 0 0 1 8 0 0 0 9 0 0 0 [10 rows x 31 columns] -517.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 1 0 2 0 1 1 0 0 0 ... 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 ... 0 0 1 0 1 0 1 2 0 0 0 0 1 0 1 0 0 0 ... 1 0 1 0 0 0 1 3 0 0 0 1 0 0 1 0 0 1 ... 0 0 0 1 2 0 0 4 1 0 0 0 0 0 0 1 2 0 ... 0 0 0 0 0 1 0 5 0 0 0 1 0 0 0 0 1 0 ... 0 0 0 1 0 0 0 6 0 1 1 1 0 2 1 1 0 0 ... 0 0 1 0 0 0 0 7 1 0 0 0 0 0 0 0 0 1 ... 1 0 0 0 1 0 1 8 1 0 1 0 1 0 0 0 0 0 ... 2 0 0 0 1 0 0 9 0 0 0 0 1 0 0 0 1 0 ... 0 0 1 1 2 2 0 29 30 31 0 0 0 0 1 0 0 0 2 0 0 1 3 0 1 0 4 0 1 1 5 0 1 1 6 0 0 1 7 1 0 0 8 0 1 0 9 0 0 0 [10 rows x 31 columns] -860.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 1 0 0 0 0 0 ... 1 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 ... 1 1 0 0 0 0 1 2 0 1 0 0 0 0 0 0 0 0 ... 0 0 0 1 0 0 1 3 0 0 1 0 0 1 0 0 0 0 ... 0 0 0 1 2 0 0 4 1 1 0 0 0 1 1 0 2 1 ... 0 0 0 0 0 0 0 5 0 1 0 0 0 0 0 0 0 0 ... 0 0 0 0 0 0 0 6 1 0 1 0 0 2 0 0 1 1 ... 0 1 0 1 0 0 1 7 0 1 0 0 0 0 0 0 1 1 ... 0 1 0 1 0 0 0 8 0 0 0 0 1 0 1 0 0 1 ... 2 0 1 0 1 0 0 9 0 1 0 0 1 0 0 0 0 0 ... 0 0 0 0 2 2 1 29 30 31 0 0 0 0 1 0 0 0 2 0 1 0 3 0 0 1 4 0 0 1 5 1 1 1 6 0 0 0 7 1 1 0 8 0 0 0 9 0 0 0 [10 rows x 31 columns] -657.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 1 0 2 0 0 0 0 0 0 ... 0 1 0 1 0 0 1 1 0 0 0 1 0 0 1 0 0 0 ... 0 1 0 0 0 1 0 2 1 0 0 0 1 0 0 0 1 1 ... 0 1 1 0 0 0 0 3 1 0 1 1 0 0 0 0 0 0 ... 1 0 0 0 2 0 0 4 1 0 1 0 0 0 1 0 2 0 ... 1 0 0 0 0 0 0 5 0 0 0 0 0 0 1 0 1 0 ... 0 1 1 0 1 0 0 6 0 1 1 0 1 2 0 0 1 0 ... 0 0 1 0 0 0 0 7 0 1 0 0 0 0 0 0 0 0 ... 0 0 1 0 0 0 0 8 0 1 0 0 0 0 1 0 0 0 ... 2 1 0 0 1 0 0 9 0 0 1 1 0 0 0 0 0 1 ... 1 0 0 0 2 2 0 29 30 31 0 0 0 0 1 1 0 0 2 0 0 0 3 0 0 1 4 1 0 0 5 1 0 1 6 0 0 1 7 0 0 0 8 0 0 1 9 1 0 0 [10 rows x 31 columns] -783.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 0 1 0 0 ... 0 1 1 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 ... 1 0 0 1 0 0 0 2 0 1 0 0 0 0 1 0 0 0 ... 0 0 0 0 1 1 1 3 0 0 0 0 1 0 0 0 0 1 ... 0 0 0 0 2 0 1 4 0 1 0 0 1 0 1 1 2 0 ... 0 1 0 0 1 1 1 5 1 0 1 0 1 0 0 0 0 0 ... 1 0 1 0 0 0 0 6 0 1 0 1 1 2 0 0 1 0 ... 0 0 0 1 1 0 0 7 1 0 0 0 0 0 0 0 0 0 ... 0 0 1 0 0 1 0 8 0 0 1 0 0 1 1 0 0 0 ... 2 0 0 0 0 1 0 9 1 0 1 0 0 0 0 0 0 0 ... 0 1 0 0 2 2 1 29 30 31 0 0 1 1 1 1 0 0 2 0 1 0 3 0 0 0 4 0 0 0 5 0 0 0 6 0 0 1 7 0 0 0 8 1 0 0 9 0 0 1 [10 rows x 31 columns] -930.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 1 0 0 0 ... 0 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0 1 0 ... 1 0 0 0 0 1 0 2 1 0 1 0 0 0 0 0 0 1 ... 0 0 1 1 0 0 0 3 0 0 0 0 0 0 0 1 0 0 ... 1 0 1 0 2 0 0 4 0 0 1 1 0 0 0 0 2 0 ... 0 0 0 0 0 0 0 5 0 0 1 1 0 1 1 0 0 1 ... 0 0 0 1 0 1 1 6 0 1 0 0 0 2 0 0 1 1 ... 0 0 0 0 0 1 0 7 0 0 0 1 1 0 0 0 0 0 ... 1 0 1 0 0 1 0 8 1 1 0 0 1 0 0 0 0 0 ... 2 0 0 0 0 1 0 9 0 0 0 0 0 1 0 0 0 1 ... 0 0 0 1 2 2 1 29 30 31 0 0 1 1 1 0 0 1 2 0 0 0 3 0 0 1 4 1 1 0 5 0 1 0 6 1 1 1 7 0 0 0 8 1 0 1 9 0 1 0 [10 rows x 31 columns] -764.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 1 0 2 0 0 0 1 1 0 ... 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 ... 1 0 0 1 1 0 0 2 0 0 0 1 0 0 0 0 1 0 ... 0 0 0 1 0 0 1 3 0 0 1 0 0 0 1 0 1 0 ... 0 0 0 1 2 0 0 4 1 1 0 0 0 0 0 0 2 0 ... 0 1 0 0 1 0 0 5 0 0 1 0 0 0 0 0 0 1 ... 1 1 0 1 0 0 0 6 0 1 0 0 0 2 0 1 0 0 ... 0 0 1 0 1 0 0 7 1 0 0 0 1 1 1 0 0 0 ... 0 1 0 0 0 0 0 8 0 0 0 0 0 0 1 0 0 0 ... 2 0 1 1 1 0 0 9 0 0 0 1 0 0 0 1 0 0 ... 0 0 0 0 2 2 0 29 30 31 0 0 0 0 1 0 0 0 2 0 0 0 3 0 0 0 4 0 1 1 5 0 0 0 6 1 0 0 7 0 0 0 8 0 1 0 9 1 1 0 [10 rows x 31 columns] -939.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 1 1 2 0 0 0 0 0 0 ... 0 0 0 0 0 1 0 1 0 0 0 0 1 0 1 1 0 1 ... 0 0 0 0 0 0 0 2 1 0 0 1 0 0 0 0 0 0 ... 0 0 0 0 1 1 0 3 0 0 0 0 0 0 1 0 0 0 ... 0 0 0 0 2 0 1 4 0 1 0 0 1 0 0 0 2 0 ... 0 0 0 0 0 0 0 5 1 0 0 1 0 1 1 0 0 0 ... 0 0 0 0 0 1 0 6 0 0 0 0 0 2 1 0 0 0 ... 1 0 0 0 0 1 0 7 0 0 0 0 1 1 0 0 0 0 ... 0 0 0 1 0 0 1 8 0 1 1 1 1 0 0 0 0 0 ... 2 0 1 0 1 1 0 9 0 0 0 1 0 0 0 1 0 0 ... 0 0 0 0 2 2 0 29 30 31 0 1 1 0 1 0 1 0 2 1 0 0 3 0 0 0 4 1 0 1 5 0 0 0 6 1 1 0 7 1 0 0 8 0 0 1 9 0 0 0 [10 rows x 31 columns] -698.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 0 0 0 0 ... 0 0 0 1 0 0 0 1 0 0 1 0 1 0 0 0 0 0 ... 1 0 0 0 1 1 1 2 1 0 0 0 0 0 1 1 0 0 ... 1 0 0 0 0 1 0 3 0 0 0 1 0 0 0 0 0 0 ... 0 0 0 0 2 0 0 4 1 1 0 0 0 1 0 0 2 1 ... 0 1 0 0 0 0 0 5 0 0 0 0 1 0 0 1 0 1 ... 0 1 0 0 0 0 0 6 0 0 0 1 0 2 0 0 1 0 ... 1 0 0 0 1 0 0 7 1 1 0 0 0 1 0 0 0 0 ... 0 1 0 1 0 0 0 8 0 1 0 0 0 0 0 0 1 1 ... 2 0 0 0 0 0 1 9 0 0 0 0 0 0 0 0 0 0 ... 0 1 1 0 2 2 0 29 30 31 0 1 0 1 1 0 0 0 2 0 0 0 3 0 0 0 4 1 0 0 5 0 0 0 6 1 1 0 7 0 0 0 8 0 0 0 9 0 1 1 [10 rows x 31 columns] -618.0 1 2 3 4 5 6 7 8 9 10 ... 22 23 24 25 26 27 28 \\ 0 2 0 0 2 0 0 0 0 0 0 ... 0 0 0 1 1 0 1 1 0 0 0 0 1 0 0 0 1 0 ... 0 0 0 0 1 0 0 2 1 0 0 1 0 0 0 1 0 0 ... 0 1 0 0 1 0 0 3 0 0 0 0 1 0 0 0 1 0 ... 0 1 1 0 2 0 0 4 0 0 0 0 0 0 0 0 2 1 ... 1 1 0 0 0 0 1 5 0 0 0 0 1 0 0 0 0 1 ... 0 1 0 1 0 0 1 6 0 0 0 0 1 2 1 0 1 0 ... 0 0 0 0 0 0 1 7 1 0 0 0 0 1 0 0 0 1 ... 0 0 0 0 0 1 0 8 1 1 0 0 0 1 1 0 0 0 ... 2 0 0 0 0 0 0 9 1 0 0 0 0 0 1 0 1 1 ... 0 0 0 0 2 2 1 29 30 31 0 0 1 0 1 0 0 0 2 0 0 0 3 0 0 0 4 1 0 0 5 1 1 0 6 1 0 0 7 0 1 0 8 0 1 1 9 0 0 0 [10 rows x 31 columns]  for i, j in parent: print(i) -974.0 -988.0 -811.0 -742.0 -892.0 -764.0 -792.0 -718.0 -777.0 -722.0 -717.0 -881.0 -834.0 -689.0 -743.0 -852.0 -809.0 -830.0 -687.0 -745.0 -574.0 -767.0 -809.0 -860.0 -814.0 -652.0 -700.0 -985.0 -970.0 -739.0 -1080.0 -797.0 -727.0 -533.0 -631.0 -819.0 -715.0 -790.0 -833.0 -596.0 -780.0 -698.0 -916.0 -682.0 -782.0 -663.0 -576.0 -633.0 -648.0 -916.0 -789.0 -1032.0 -858.0 -899.0 -795.0 -537.0 -627.0 -776.0 -916.0 -964.0 -748.0 -812.0 -738.0 -878.0 -606.0 -617.0 -676.0 -824.0 -710.0 -648.0 -765.0 -728.0 -615.0 -671.0 -763.0 -676.0 -680.0 -753.0 -764.0 -796.0 -805.0 -810.0 -840.0 -732.0 -761.0 -782.0 -797.0 -711.0 -762.0 -605.0 -583.0 -517.0 -860.0 -657.0 -783.0 -930.0 -764.0 -939.0 -698.0 -618.0  sorted関数 x = np.random.permutation(np.array([i for i in range(10) ])) x array([5, 6, 4, 1, 3, 9, 2, 8, 7, 0])  sorted(x) [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]  l = [1, -3, 2] sorted(l) [-3, 1, 2]  sorted(l, key=abs) [1, 2, -3]  l_2d = [[2, 10], [1, -30], [-3, 20]] l_2d [[2, 10], [1, -30], [-3, 20]]  sorted(l_2d, key=max) [[1, -30], [2, 10], [-3, 20]]  引数keyに最大値を返す組み込み関数max()を指定すると，各リストの最大値を基準に並べ替えられる。\nsorted(l_2d,key=lambda x:x[0]) [[-3, 20], [1, -30], [2, 10]]  a = lambda x : x*x a(4) 16  これはsorted関数のkeyに\n「要素xを受け取り，x[0]を返す」\nというlambda式を指定したからです。 これにより，sorted関数は，リストの2番目の要素をkeyとしてソートを行うようになったのです。\nparent = sorted(parent, key=lambda x:-x[0]) for i, j in parent: print(i) -517.0 -533.0 -537.0 -574.0 -576.0 -583.0 -596.0 -605.0 -606.0 -615.0 -617.0 -618.0 -627.0 -631.0 -633.0 -648.0 -648.0 -652.0 -657.0 -663.0 -671.0 -676.0 -676.0 -680.0 -682.0 -687.0 -689.0 -698.0 -698.0 -700.0 -710.0 -711.0 -715.0 -717.0 -718.0 -722.0 -727.0 -728.0 -732.0 -738.0 -739.0 -742.0 -743.0 -745.0 -748.0 -753.0 -761.0 -762.0 -763.0 -764.0 -764.0 -764.0 -765.0 -767.0 -776.0 -777.0 -780.0 -782.0 -782.0 -783.0 -789.0 -790.0 -792.0 -795.0 -796.0 -797.0 -797.0 -805.0 -809.0 -809.0 -810.0 -811.0 -812.0 -814.0 -819.0 -824.0 -830.0 -833.0 -834.0 -840.0 -852.0 -858.0 -860.0 -860.0 -878.0 -881.0 -892.0 -899.0 -916.0 -916.0 -916.0 -930.0 -939.0 -964.0 -970.0 -974.0 -985.0 -988.0 -1032.0 -1080.0  parent = parent[:elite_length] for i, j in parent: print(i) -517.0 -533.0 -537.0 -574.0 -576.0 -583.0 -596.0 -605.0 -606.0 -615.0 -617.0 -618.0 -627.0 -631.0 -633.0 -648.0 -648.0 -652.0 -657.0 -663.0  enumerate関数 test_list = [5,4,8,9,2,4] test_list [5, 4, 8, 9, 2, 4]  for n, m in enumerate(test_list): print(n,m) 0 5 1 4 2 8 3 9 4 2 5 4  こういうプログラムは\nfor k1, v1 in enumerate(parent): for k2, v2 in enumerate(parent): if k1 \u0026lt; k2: 組み合わせを考えている！\nさぁ実行しよう！ kiso, holiday = read_excel() parent = [] for i in range(100): kiso_copy = FirstCreateGenes(kiso, holiday) kiso_copy = HolidayFix(kiso_copy,holiday) score = EvaluationFunc(kiso_copy) parent.append([score,kiso_copy]) elite_length = 20 gene_length = 5 ep = 0.5 sd = 0.05 for i in range(gene_length): parent = sorted(np.array(parent), key=lambda x:-x[0]) parent = parent[:elite_length] print(\u0026#34;第\u0026#34;+str(i+1)+\u0026#34;世代\u0026#34;) if i == 0: top = parent[0] print(top[0]) print(np.array(top[1])) else: if top[0] \u0026gt; parent[0][0]: parent.append(top) print(top[0]) print(np.array(top[1])) else: top = parent[0] print(parent[0][0]) print(np.array(parent[0][1])) children = [] for k1, v1 in enumerate(parent): for k2, v2 in enumerate(parent): if k1 \u0026lt; k2: ch1, ch2 = crossover(ep,sd,v1[1],v2[1]) ch1 = HolidayFix(ch1,holiday) ch2 = HolidayFix(ch2,holiday) score1 = EvaluationFunc(ch1) score2 = EvaluationFunc(ch2) children.append([score1,ch1]) children.append([score2,ch2]) parent = children.copy() /Users/daisuke/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:18: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray 第1世代 -555.0 [[2 0 0 2 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 1 0 0 0 1 1 1 0 0] [0 0 0 0 0 0 0 0 1 0 0 2 2 0 0 1 0 0 1 0 0 0 0 1 0 1 0 1 0 0 0] [1 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 1 1 0 0 0 0] [0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 1 0 2 0 0 0 1 0 0 2 0 0 0 0 0] [0 0 1 0 1 0 1 0 2 0 0 0 0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0 0 1 0] [0 1 1 1 0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 1 0 1 0 0 1 0 0 0 0 0 0] [1 0 0 0 0 2 0 0 0 0 0 1 1 0 1 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 1] [0 0 0 0 0 0 0 1 0 0 0 0 2 0 1 0 1 1 1 0 1 0 0 0 0 0 1 0 0 0 0] [0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 1 1 0 0 0 1 2 1 0 0 0 0 0 1 0 0] [1 0 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 1 1 0 2 2 0 0 0 0]] 第2世代 -459.0 [[2 1 0 2 0 0 1 0 0 0 0 1 0 1 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0] [0 0 0 1 1 0 0 0 0 0 0 2 2 0 0 1 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0] [0 0 0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 1 0 1 0 0 1 0 0 1 0 0 0 0 1] [0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 1 0 2 0 0 0 1 0 0 2 0 0 0 0 0] [0 0 1 0 0 1 1 1 2 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 0 0 0 0 0 1 0] [0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 1 1 0 1 0 1 0 0 1 0 1 0 0 0 0] [0 1 0 0 0 2 1 0 0 0 0 1 0 0 1 0 0 1 1 1 0 0 0 1 0 0 0 0 1 0 0] [0 0 0 0 0 0 0 1 0 0 0 1 2 0 1 0 1 1 0 0 0 1 0 0 0 0 1 0 0 0 0] [0 0 0 0 1 1 0 0 0 0 1 0 1 0 0 1 0 0 0 0 1 2 0 1 0 0 0 0 1 0 0] [1 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 1 1 1 0 0 0 0 2 2 0 0 1 0]] 第3世代 -396.0 [[2 1 0 2 0 0 0 1 0 0 0 0 0 0 1 0 1 1 0 0 0 0 1 0 0 1 0 0 0 0 0] [0 1 0 0 0 0 1 1 0 0 0 2 2 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0] [1 0 0 0 0 1 1 0 0 0 0 1 0 0 1 1 1 0 0 1 0 0 0 0 0 0 1 0 0 0 0] [0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 2 0 0 0 0 0 0 2 1 0 1 0 1] [0 0 0 1 0 0 0 0 2 0 0 0 0 1 1 0 0 0 0 0 1 0 1 1 0 0 0 1 1 0 0] [0 1 0 0 0 0 0 1 1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0 0] [0 1 0 0 1 2 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 1 1 1 0 0 1 0] [0 0 0 0 1 0 0 0 0 1 0 0 2 0 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 1 0] [0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 2 0 1 1 0 0 0 0 1 0] [0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 1 2 2 1 1 0 0]] 第4世代 -396.0 [[2 1 0 2 0 0 0 1 0 0 0 0 0 0 1 0 1 1 0 0 0 0 1 0 0 1 0 0 0 0 0] [0 1 0 0 0 0 1 1 0 0 0 2 2 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0] [1 0 0 0 0 1 1 0 0 0 0 1 0 0 1 1 1 0 0 1 0 0 0 0 0 0 1 0 0 0 0] [0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 2 0 0 0 0 0 0 2 1 0 1 0 1] [0 0 0 1 0 0 0 0 2 0 0 0 0 1 1 0 0 0 0 0 1 0 1 1 0 0 0 1 1 0 0] [0 1 0 0 0 0 0 1 1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0 0] [0 1 0 0 1 2 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 1 1 1 0 0 1 0] [0 0 0 0 1 0 0 0 0 1 0 0 2 0 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 1 0] [0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 2 0 1 1 0 0 0 0 1 0] [0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 1 2 2 1 1 0 0]] 第5世代 -332.0 [[2 0 0 2 0 0 1 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 0 1 1 0] [0 0 0 0 1 0 0 0 0 0 0 2 2 0 0 1 0 0 1 0 0 1 1 0 0 1 0 0 0 0 0] [0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 1 0 1 1 0 0 0 0 0 1 0 0 0 0 0 1] [0 0 1 1 0 0 0 1 0 0 1 0 0 0 0 0 1 0 2 0 0 0 1 0 0 2 0 0 0 0 0] [0 0 1 0 1 0 0 0 2 0 0 0 1 0 0 0 0 0 1 0 1 0 1 1 0 0 0 1 0 0 0] [0 0 1 0 0 0 0 1 0 0 1 0 0 1 0 0 1 1 0 1 0 0 0 0 1 0 0 0 0 1 0] [1 0 0 0 0 2 1 0 0 1 0 1 0 0 1 0 0 0 1 0 0 0 0 1 1 0 0 0 1 0 0] [0 0 0 0 1 0 0 1 0 0 0 0 2 0 1 0 0 0 1 0 0 1 1 0 0 0 1 0 0 0 0] [0 0 1 0 1 1 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 2 0 0 0 1 0 0 1 0 0] [0 0 0 1 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0 0 2 2 0 1 1 0]]  トップを保存しよう！ topshiftdata = top[1].replace(1,\u0026#34;○\u0026#34;).replace(2,\u0026#34;◎\u0026#34;).replace(0,\u0026#34;\u0026#34;) topshiftdata.to_excel(\u0026#34;shift.xlsx\u0026#34;) ",
    "ref": "/blog/2021-01-01-iden/"
  },{
    "title": "About",
    "date": "",
    "description": "",
    "body": "このサイトではその辺にいる物理学徒の戯言を投稿します．\n2014年8月から2017年1月までの間に当時，Android向けに提供していたメールアプリ「Bluemail」の日本語翻訳のアシスタントを担当。\n2016年4月に私立春日部共栄高等学校へ入学。\n同年11月に情報技術を高く評価され，Own Flow氏が University of London (Imperial College London, Faculty of Engineering, Computing) への推薦入学を提案。しかし，金銭的な理由と両親の反対により断る。\n同校で3年間硬式テニス部に所属し，2019年3月に卒業。\n駿台予備学校お茶の水3号館（東大專門校舎）で1年間過ごし，2020年4月に埼玉大学 理学部 物理学科に入学（現在所属）。\n尚，埼玉大学宇宙工学サークルあかとき，CORE（Challengers Of Rocket Engineering），早稲田大学公認サークル 歩行会に所属。2020年より初学者向けのWeb系プログラミング言語およびPythonの講師を勤め，2021年よりMinecraftを用いた小中学生向けのプログラミング講師として企業登録．\n",
    "ref": "/about/"
  },{
    "title": "Kontakt",
    "date": "",
    "description": "",
    "body": "",
    "ref": "/contact/"
  }]
